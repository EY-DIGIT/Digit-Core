webpackHotUpdate("main",{

/***/ "../libraries/src/services/atoms/ApiCacheService.js":
/*!**********************************************************!*\
  !*** ../libraries/src/services/atoms/ApiCacheService.js ***!
  \**********************************************************/
/*! exports provided: ApiCacheService */
/*! exports used: ApiCacheService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ApiCacheService; });
/* harmony import */ var _Utils_Storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils/Storage */ "../libraries/src/services/atoms/Utils/Storage.js");

var defaultApiCachingSettings = [{
  serviceName: "localization",
  cacheTimeInSecs: 86400
}, {
  serviceName: "access/v1/actions",
  cacheTimeInSecs: 86400
}, {
  serviceName: "user/_search",
  cacheTimeInSecs: 86400
}, {
  serviceName: "egov-mdms-service",
  cacheTimeInSecs: 3600,
  debounceTimeInMS: 100,
  moduleSettings: [{
    moduleName: "FSM",
    cacheTimeInSecs: 7200
  }]
}];
var storageKey = "cachingService";
var getCachedSetting = function () {
  if (Digit.ApiCacheSetting) {
    return Digit.ApiCacheSetting;
  }
  var setting = _Utils_Storage__WEBPACK_IMPORTED_MODULE_0__[/* PersistantStorage */ "a"].get(storageKey) || defaultApiCachingSettings;
  Digit.ApiCacheSetting = setting;
  return setting;
};
var getSetting = function (serviceName, moduleName) {
  var _serviceSetting$modul;
  var setting = getCachedSetting();
  var serviceSetting = setting.find(function (item) {
    return item.serviceName === serviceName;
  });
  var responseSetting = {
    cacheTimeInSecs: serviceSetting.cacheTimeInSecs,
    debounceTimeInMS: serviceSetting.debounceTimeInMS || 100
  };
  if (!moduleName) {
    return responseSetting;
  }
  var moduleSettings = serviceSetting === null || serviceSetting === void 0 ? void 0 : (_serviceSetting$modul = serviceSetting.moduleSettings) === null || _serviceSetting$modul === void 0 ? void 0 : _serviceSetting$modul.find(function (item) {
    return item.moduleName === moduleName;
  });
  if (!moduleSettings) {
    return responseSetting;
  }
  return {
    cacheTimeInSecs: moduleSettings.cacheTimeInSecs || responseSetting.cacheTimeInSecs,
    debounceTimeInMS: moduleSettings.debounceTimeInMS || responseSetting.debounceTimeInMS
  };
};
var ApiCacheService = {
  saveSetting: function (setting) {
    _Utils_Storage__WEBPACK_IMPORTED_MODULE_0__[/* PersistantStorage */ "a"].set(storageKey, setting || defaultApiCachingSettings);
  },
  getSettingByServiceUrl: function (serviceUrl, moduleName) {
    return getSetting(serviceUrl.split("/")[1], moduleName);
  }
};

/***/ }),

/***/ "../libraries/src/services/atoms/Utils/Request.js":
/*!********************************************************!*\
  !*** ../libraries/src/services/atoms/Utils/Request.js ***!
  \********************************************************/
/*! exports provided: Request, ServiceRequest */
/*! exports used: ServiceRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Request */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ServiceRequest; });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "../../node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function () {}; return { s: F, n: function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function (e) { throw e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function () { it = it.call(o); }, n: function () { var step = it.next(); normalCompletion = step.done; return step; }, e: function (e) { didErr = true; err = e; }, f: function () { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }


/**
 * Custom Request to make all api calls
 *
 * @author jagankumar-egov
 *
 */

axios__WEBPACK_IMPORTED_MODULE_0___default.a.interceptors.response.use(function (res) {
  return res;
}, function (err) {
  var _err$response, _err$response$data;
  var isEmployee = window.location.pathname.split("/").includes("employee");
  if (err !== null && err !== void 0 && (_err$response = err.response) !== null && _err$response !== void 0 && (_err$response$data = _err$response.data) !== null && _err$response$data !== void 0 && _err$response$data.Errors) {
    var _iterator = _createForOfIteratorHelper(err.response.data.Errors),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _error$message, _error$message$toLowe, _error$message2, _error$message2$toLow;
        var error = _step.value;
        if (error.message.includes("InvalidAccessTokenException")) {
          var _window, _window2;
          localStorage.clear();
          sessionStorage.clear();
          window.location.href = (isEmployee ? `/${(_window = window) === null || _window === void 0 ? void 0 : _window.contextPath}/employee/user/login` : `/${(_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.contextPath}/citizen/login`) + `?from=${encodeURIComponent(window.location.pathname + window.location.search)}`;
        } else if (error !== null && error !== void 0 && (_error$message = error.message) !== null && _error$message !== void 0 && (_error$message$toLowe = _error$message.toLowerCase()) !== null && _error$message$toLowe !== void 0 && _error$message$toLowe.includes("internal server error") || error !== null && error !== void 0 && (_error$message2 = error.message) !== null && _error$message2 !== void 0 && (_error$message2$toLow = _error$message2.toLowerCase()) !== null && _error$message2$toLow !== void 0 && _error$message2$toLow.includes("some error occured")) {
          var _window3, _window4;
          window.location.href = (isEmployee ? `/${(_window3 = window) === null || _window3 === void 0 ? void 0 : _window3.contextPath}/employee/user/error` : `/${(_window4 = window) === null || _window4 === void 0 ? void 0 : _window4.contextPath}/citizen/error`) + `?type=maintenance&from=${encodeURIComponent(window.location.pathname + window.location.search)}`;
        } else if (error.message.includes("ZuulRuntimeException")) {
          var _window5, _window6;
          window.location.href = (isEmployee ? `/${(_window5 = window) === null || _window5 === void 0 ? void 0 : _window5.contextPath}/employee/user/error` : `/${(_window6 = window) === null || _window6 === void 0 ? void 0 : _window6.contextPath}/citizen/error`) + `?type=notfound&from=${encodeURIComponent(window.location.pathname + window.location.search)}`;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  throw err;
});
var requestInfo = function () {
  var _Digit$UserService$ge;
  return {
    authToken: ((_Digit$UserService$ge = Digit.UserService.getUser()) === null || _Digit$UserService$ge === void 0 ? void 0 : _Digit$UserService$ge.access_token) || null
  };
};
var authHeaders = function () {
  var _Digit$UserService$ge2;
  return {
    "auth-token": ((_Digit$UserService$ge2 = Digit.UserService.getUser()) === null || _Digit$UserService$ge2 === void 0 ? void 0 : _Digit$UserService$ge2.access_token) || null
  };
};
var userServiceData = function () {
  var _Digit$UserService$ge3;
  return {
    userInfo: (_Digit$UserService$ge3 = Digit.UserService.getUser()) === null || _Digit$UserService$ge3 === void 0 ? void 0 : _Digit$UserService$ge3.info
  };
};
window.Digit = window.Digit || {};
window.Digit = Object.assign({}, window.Digit, {
  RequestCache: window.Digit.RequestCache || {}
});
var Request = async function (_ref) {
  var _window7, _window7$globalConfig, _window8, _window8$globalConfig, _res$response;
  var _ref$method = _ref.method,
    method = _ref$method === void 0 ? "POST" : _ref$method,
    url = _ref.url,
    _ref$data = _ref.data,
    data = _ref$data === void 0 ? {} : _ref$data,
    _ref$headers = _ref.headers,
    headers = _ref$headers === void 0 ? {} : _ref$headers,
    _ref$useCache = _ref.useCache,
    useCache = _ref$useCache === void 0 ? false : _ref$useCache,
    _ref$params = _ref.params,
    params = _ref$params === void 0 ? {} : _ref$params,
    auth = _ref.auth,
    _ref$urlParams = _ref.urlParams,
    urlParams = _ref$urlParams === void 0 ? {} : _ref$urlParams,
    userService = _ref.userService,
    _ref$locale = _ref.locale,
    locale = _ref$locale === void 0 ? true : _ref$locale,
    _ref$authHeader = _ref.authHeader,
    authHeader = _ref$authHeader === void 0 ? false : _ref$authHeader,
    _ref$setTimeParam = _ref.setTimeParam,
    setTimeParam = _ref$setTimeParam === void 0 ? true : _ref$setTimeParam,
    _ref$userDownload = _ref.userDownload,
    userDownload = _ref$userDownload === void 0 ? false : _ref$userDownload,
    _ref$noRequestInfo = _ref.noRequestInfo,
    noRequestInfo = _ref$noRequestInfo === void 0 ? false : _ref$noRequestInfo,
    _ref$multipartFormDat = _ref.multipartFormData,
    multipartFormData = _ref$multipartFormDat === void 0 ? false : _ref$multipartFormDat,
    _ref$multipartData = _ref.multipartData,
    multipartData = _ref$multipartData === void 0 ? {} : _ref$multipartData,
    _ref$reqTimestamp = _ref.reqTimestamp,
    reqTimestamp = _ref$reqTimestamp === void 0 ? false : _ref$reqTimestamp;
  var ts = new Date().getTime();
  if (method.toUpperCase() === "POST") {
    var _Digit$UserService$ge4;
    data.RequestInfo = {
      apiId: "Rainmaker"
    };
    if (auth || !!((_Digit$UserService$ge4 = Digit.UserService.getUser()) !== null && _Digit$UserService$ge4 !== void 0 && _Digit$UserService$ge4.access_token)) {
      data.RequestInfo = Object.assign({}, data.RequestInfo, requestInfo());
    }
    if (userService) {
      data.RequestInfo = Object.assign({}, data.RequestInfo, userServiceData());
    }
    if (locale) {
      data.RequestInfo = Object.assign({}, data.RequestInfo, {
        msgId: `${ts}|${Digit.StoreData.getCurrentLanguage()}`
      });
    }
    if (noRequestInfo) {
      delete data.RequestInfo;
    }

    /* 
    Feature :: Privacy
    
    Desc :: To send additional field in HTTP Requests inside RequestInfo Object as plainAccessRequest
    */
    var privacy = Digit.Utils.getPrivacyObject();
    if (privacy && !url.includes("/edcr/rest/dcr/")) {
      if (!noRequestInfo) {
        data.RequestInfo = Object.assign({}, data.RequestInfo, {
          plainAccessRequest: Object.assign({}, privacy)
        });
      }
    }
  }
  var headers1 = {
    "Content-Type": "application/json",
    Accept: (_window7 = window) !== null && _window7 !== void 0 && (_window7$globalConfig = _window7.globalConfigs) !== null && _window7$globalConfig !== void 0 && _window7$globalConfig.getConfig("ENABLE_SINGLEINSTANCE") ? "application/pdf,application/json" : "application/pdf"
  };
  if (authHeader) headers = Object.assign({}, headers, authHeaders());
  if (userDownload) headers = Object.assign({}, headers, headers1);
  var key = "";
  if (useCache) {
    key = `${method.toUpperCase()}.${url}.${btoa(escape(JSON.stringify(params, null, 0)))}.${btoa(escape(JSON.stringify(data, null, 0)))}`;
    var value = window.Digit.RequestCache[key];
    if (value) {
      return value;
    }
  } else if (setTimeParam) {
    params._ = Date.now();
  }
  if (reqTimestamp) {
    data.RequestInfo = Object.assign({}, data.RequestInfo, {
      ts: Number(ts)
    });
  }
  var _url = url.split("/").map(function (path) {
    var _path$split;
    var key = (_path$split = path.split(":")) === null || _path$split === void 0 ? void 0 : _path$split[1];
    return urlParams[key] ? urlParams[key] : path;
  }).join("/");
  if (multipartFormData) {
    var _Digit$UserService$ge5;
    var multipartFormDataRes = await axios__WEBPACK_IMPORTED_MODULE_0___default()({
      method: method,
      url: _url,
      data: multipartData.data,
      params: params,
      headers: {
        "Content-Type": "multipart/form-data",
        "auth-token": ((_Digit$UserService$ge5 = Digit.UserService.getUser()) === null || _Digit$UserService$ge5 === void 0 ? void 0 : _Digit$UserService$ge5.access_token) || null
      }
    });
    return multipartFormDataRes;
  }
  /* 
  Feature :: Single Instance
   Desc :: Fix for central instance to send tenantID in all query params
  */
  var tenantInfo = Digit.SessionStorage.get("userType") === "citizen" ? Digit.ULBService.getStateId() : Digit.ULBService.getCurrentTenantId() || Digit.ULBService.getStateId();
  if (!params["tenantId"] && (_window8 = window) !== null && _window8 !== void 0 && (_window8$globalConfig = _window8.globalConfigs) !== null && _window8$globalConfig !== void 0 && _window8$globalConfig.getConfig("ENABLE_SINGLEINSTANCE")) {
    params["tenantId"] = tenantInfo;
  }
  var res = userDownload ? await axios__WEBPACK_IMPORTED_MODULE_0___default()({
    method: method,
    url: _url,
    data: data,
    params: params,
    headers: headers,
    responseType: "arraybuffer"
  }) : await axios__WEBPACK_IMPORTED_MODULE_0___default()({
    method: method,
    url: _url,
    data: data,
    params: params,
    headers: headers
  });
  if (userDownload) return res;
  var returnData = (res === null || res === void 0 ? void 0 : res.data) || (res === null || res === void 0 ? void 0 : (_res$response = res.response) === null || _res$response === void 0 ? void 0 : _res$response.data) || {};
  if (useCache && res !== null && res !== void 0 && res.data && Object.keys(returnData).length !== 0) {
    window.Digit.RequestCache[key] = returnData;
  }
  return returnData;
};

/**
 *
 * @param {*} serviceName
 *
 * preHook:
 * ({params, data}) => ({params, data})
 *
 * postHook:
 * ({resData}) => ({resData})
 *
 */

var ServiceRequest = async function (_ref2) {
  var serviceName = _ref2.serviceName,
    _ref2$method = _ref2.method,
    method = _ref2$method === void 0 ? "POST" : _ref2$method,
    url = _ref2.url,
    _ref2$data = _ref2.data,
    data = _ref2$data === void 0 ? {} : _ref2$data,
    _ref2$headers = _ref2.headers,
    headers = _ref2$headers === void 0 ? {} : _ref2$headers,
    _ref2$useCache = _ref2.useCache,
    useCache = _ref2$useCache === void 0 ? false : _ref2$useCache,
    _ref2$params = _ref2.params,
    params = _ref2$params === void 0 ? {} : _ref2$params,
    auth = _ref2.auth,
    reqTimestamp = _ref2.reqTimestamp,
    userService = _ref2.userService;
  var preHookName = `${serviceName}Pre`;
  var postHookName = `${serviceName}Post`;
  var reqParams = params;
  var reqData = data;
  if (window[preHookName] && typeof window[preHookName] === "function") {
    var preHookRes = await window[preHookName]({
      params: params,
      data: data
    });
    reqParams = preHookRes.params;
    reqData = preHookRes.data;
  }
  var resData = await Request({
    method: method,
    url: url,
    data: reqData,
    headers: headers,
    useCache: useCache,
    params: reqParams,
    auth: auth,
    userService: userService,
    reqTimestamp: reqTimestamp
  });
  if (window[postHookName] && typeof window[postHookName] === "function") {
    return await window[postHookName](resData);
  }
  return resData;
};

/***/ }),

/***/ "../libraries/src/services/atoms/Utils/Storage.js":
/*!********************************************************!*\
  !*** ../libraries/src/services/atoms/Utils/Storage.js ***!
  \********************************************************/
/*! exports provided: Storage, PersistantStorage */
/*! exports used: PersistantStorage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Storage */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PersistantStorage; });
var localStoreSupport = function () {
  try {
    return "sessionStorage" in window && window["sessionStorage"] !== null;
  } catch (e) {
    return false;
  }
};
var k = function (key) {
  return `Digit.${key}`;
};
var getStorage = function (storageClass) {
  return {
    get: function (key) {
      if (localStoreSupport() && key) {
        var valueInStorage = storageClass.getItem(k(key));
        if (!valueInStorage || valueInStorage === "undefined") {
          return null;
        }
        var item = JSON.parse(valueInStorage);
        if (Date.now() > item.expiry) {
          storageClass.removeItem(k(key));
          return null;
        }
        return item.value;
      } else if (typeof window !== "undefined") {
        var _window, _window$eGov;
        return ((_window = window) === null || _window === void 0 ? void 0 : (_window$eGov = _window.eGov) === null || _window$eGov === void 0 ? void 0 : _window$eGov.Storage) && window.eGov.Storage[k(key)].value;
      } else {
        return null;
      }
    },
    set: function (key, value) {
      var ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 86400;
      var item = {
        value: value,
        ttl: ttl,
        expiry: Date.now() + ttl * 1000
      };
      if (localStoreSupport()) {
        storageClass.setItem(k(key), JSON.stringify(item));
      } else if (typeof window !== "undefined") {
        window.eGov = window.eGov || {};
        window.eGov.Storage = window.eGov.Storage || {};
        window.eGov.Storage[k(key)] = item;
      }
    },
    del: function (key) {
      if (localStoreSupport()) {
        storageClass.removeItem(k(key));
      } else if (typeof window !== "undefined") {
        window.eGov = window.eGov || {};
        window.eGov.Storage = window.eGov.Storage || {};
        delete window.eGov.Storage[k(key)];
      }
    }
  };
};
var Storage = getStorage(window.sessionStorage);
var PersistantStorage = getStorage(window.localStorage);

/***/ }),

/***/ "../libraries/src/services/atoms/urls.js":
/*!***********************************************!*\
  !*** ../libraries/src/services/atoms/urls.js ***!
  \***********************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var Urls = {
  MDMS: `/egov-mdms-service/v1/_search`,
  WorkFlow: `/egov-workflow-v2/egov-wf/businessservice/_search`,
  WorkFlowProcessSearch: `/egov-workflow-v2/egov-wf/process/_search`,
  localization: `/localization/messages/v1/_search`,
  location: {
    localities: `/egov-location/location/v11/boundarys/_search?hierarchyTypeCode=ADMIN&boundaryType=Locality`,
    wards: `/egov-location/location/v11/boundarys/_search?hierarchyTypeCode=ADMIN&boundaryType=Ward`,
    revenue_localities: `/egov-location/location/v11/boundarys/_search?hierarchyTypeCode=REVENUE&boundaryType=Locality`
  },
  pgr_search: `/pgr-services/v2/request/_search`,
  pgr_update: `/pgr-services/v2/request/_update`,
  filter_data: `https://run.mocky.io/v3/597a50a0-90e5-4a45-b82e-8a2186b760bd`,
  FileStore: "/filestore/v1/files",
  FileFetch: "/filestore/v1/files/url",
  PGR_Create: `/pgr-services/v2/request/_create`,
  pgr_count: `/pgr-services/v2/request/_count`,
  OTP_Send: "/user-otp/v1/_send",
  Authenticate: "/user/oauth/token",
  RegisterUser: "/user/citizen/_create",
  ChangePassword: "/user/password/nologin/_update",
  ChangePassword1: "/user/password/_update",
  UserProfileUpdate: "/user/profile/_update",
  EmployeeSearch: "/egov-hrms/employees/_search",
  InboxSearch: "/works-inbox-service/v2/_search",
  UserSearch: "/user/_search",
  UserLogout: "/user/_logout",
  Shortener: "/egov-url-shortening/shortener",
  works: {
    create: "/loi-service/v1/_create",
    estimateSearch: "/estimate-service/estimate/v1/_search",
    loiSearch: "/loi-service/v1/_search",
    createEstimate: "/estimate-service/estimate/v1/_create",
    approvedEstimateSearch: "/estimate-service/estimate/v1/_search",
    searchEstimate: "/estimate-service/estimate/v1/_search",
    updateLOI: "/loi-service/v1/_update",
    updateEstimate: "/estimate-service/estimate/v1/_update",
    download_pdf: "/egov-pdf/download/WORKSESTIMATE/estimatepdf"
  },
  fsm: {
    search: "/fsm/v1/_search",
    create: "/fsm/v1/_create",
    update: "/fsm/v1/_update",
    vendorSearch: "/vendor/v1/_search",
    vehicleSearch: "/vehicle/v1/_search",
    audit: "/fsm/v1/_audit",
    vehicleTripSearch: "/vehicle/trip/v1/_search",
    billingSlabSearch: "/fsm-calculator/v1/billingSlab/_search",
    vehilceUpdate: "/vehicle/trip/v1/_update",
    createVendor: "/vendor/v1/_create",
    updateVendor: "/vendor/v1/_update",
    createVehicle: "/vehicle/v1/_create",
    updateVehicle: "/vehicle/v1/_update",
    driverSearch: "/vendor/driver/v1/_search",
    createDriver: "/vendor/driver/v1/_create",
    updateDriver: "/vendor/driver/v1/_update",
    vehicleTripCreate: "/vehicle/trip/v1/_create"
  },
  payment: {
    fetch_bill: "/billing-service/bill/v2/_fetchbill",
    demandSearch: "/billing-service/demand/_search",
    create_reciept: "/collection-services/payments/_create",
    print_reciept: "/collection-services/payments",
    generate_pdf: "/pdf-service/v1/_create",
    create_citizen_reciept: "/pg-service/transaction/v1/_create",
    update_citizen_reciept: "/pg-service/transaction/v1/_update",
    search_bill: "/billing-service/bill/v2/_search",
    reciept_search: "/collection-services/payments/:buisnessService/_search",
    obps_Reciept_Search: "/collection-services/payments/_search",
    billAmendmentSearch: "/billing-service/amendment/_search",
    getBulkPdfRecordsDetails: "/pdf-service/v1/_getBulkPdfRecordsDetails"
  },
  pt: {
    fectch_property: "/property-services/property/_search",
    fetch_payment_details: "/billing-service/bill/v2/_fetchbill",
    create: "/property-services/property/_create",
    search: "/property-services/property/_search",
    update: "/property-services/property/_update",
    pt_calculation_estimate: "/pt-calculator-v2/propertytax/v2/_estimate",
    assessment_create: "/property-services/assessment/_create",
    assessment_search: "/property-services/assessment/_search",
    payment_search: "/collection-services/payments/PT/_search",
    pt_calculate_mutation: "/pt-calculator-v2/propertytax/mutation/_calculate"
  },
  dss: {
    dashboardConfig: "/dashboard-analytics/dashboard/getDashboardConfig",
    getCharts: "/dashboard-analytics/dashboard/getChartV2"
  },
  mcollect: {
    search: "/echallan-services/eChallan/v1/_search",
    create: "/echallan-services/eChallan/v1/_create?",
    fetch_bill: "/billing-service/bill/v2/_fetchbill?",
    search_bill: "/egov-searcher/bill-genie/mcollectbills/_get",
    search_bill_pt: "/egov-searcher/bill-genie/billswithaddranduser/_get",
    update: "/echallan-services/eChallan/v1/_update",
    download_pdf: "/egov-pdf/download/UC/mcollect-challan",
    receipt_download: "/egov-pdf/download/PAYMENT/consolidatedreceipt",
    bill_download: "/egov-pdf/download/BILL/consolidatedbill",
    count: "/echallan-services/eChallan/v1/_count"
  },
  hrms: {
    search: "/egov-hrms/employees/_search",
    count: "/egov-hrms/employees/_count",
    create: "/egov-hrms/employees/_create",
    update: "/egov-hrms/employees/_update"
  },
  tl: {
    create: "/tl-services/v1/_create",
    search: "/tl-services/v1/_search",
    fetch_payment_details: "/billing-service/bill/v2/_fetchbill",
    download_pdf: "/egov-pdf/download/TL/",
    update: "/tl-services/v1/_update",
    billingslab: "/tl-calculator/billingslab/_search"
  },
  receipts: {
    receipt_download: "/egov-pdf/download/PAYMENT/consolidatedreceipt",
    payments: "/collection-services/payments",
    count: "/egov-hrms/employees/_count"
  },
  obps: {
    scrutinyDetails: "/edcr/rest/dcr/scrutinydetails",
    comparisionReport: "/edcr/rest/dcr/occomparison",
    create: "/bpa-services/v1/bpa/_create",
    nocSearch: "/noc-services/v1/noc/_search",
    updateNOC: "/noc-services/v1/noc/_update",
    update: "/bpa-services/v1/bpa/_update",
    bpaSearch: "/bpa-services/v1/bpa/_search",
    bpaRegSearch: "/tl-services/v1/BPAREG/_search",
    bpaRegCreate: "/tl-services/v1/BPAREG/_create",
    bpaRegGetBill: "/tl-calculator/v1/BPAREG/_getbill",
    bpaRegUpdate: "/tl-services/v1/BPAREG/_update",
    receipt_download: "/egov-pdf/download/PAYMENT/consolidatedreceipt",
    edcrreportdownload: "/bpa-services/v1/bpa/_permitorderedcr",
    getSearchDetails: "/inbox/v1/dss/_search"
  },
  edcr: {
    create: "/edcr/rest/dcr/scrutinize"
  },
  events: {
    search: "/egov-user-event/v1/events/_search",
    update: "/egov-user-event/v1/events/lat/_update",
    updateEvent: "/egov-user-event/v1/events/_update",
    updateEventCDG: "/egov-user-event/v1/events/lat/_update",
    count: "/egov-user-event/v1/events/notifications/_count",
    create: "/egov-user-event/v1/events/_create"
  },
  ws: {
    water_create: "/ws-services/wc/_create",
    sewarage_create: "/sw-services/swc/_create",
    water_search: "/ws-services/wc/_search",
    sewarage_search: "/sw-services/swc/_search",
    water_update: "/ws-services/wc/_update",
    sewarage_update: "/sw-services/swc/_update",
    ws_calculation_estimate: "/ws-calculator/waterCalculator/_estimate",
    sw_calculation_estimate: "/sw-calculator/sewerageCalculator/_estimate",
    ws_connection_search: "/ws-calculator/meterConnection/_search",
    sw_payment_search: "/collection-services/payments/SW/_search",
    ws_payment_search: "/collection-services/payments/WS/_search",
    billAmendmentCreate: "/billing-service/amendment/_create",
    billAmendmentUpdate: "/billing-service/amendment/_update",
    ws_meter_conncetion_create: "/ws-calculator/meterConnection/_create",
    sw_meter_conncetion_create: "/sw-calculator/meterConnection/_create",
    wns_group_bill: "/egov-pdf/download/WNS/wnsgroupbill",
    cancel_group_bill: "/pdf-service/v1/_cancelProcess",
    wns_generate_pdf: "/egov-pdf/download/WNS/wnsbill",
    water_applyAdhocTax: "/ws-calculator/waterCalculator/_applyAdhocTax",
    sewerage_applyAdhocTax: "/sw-calculator/sewerageCalculator/_applyAdhocTax",
    getSearchDetails: "/inbox/v1/dss/_search"
  },
  engagement: {
    document: {
      search: "/egov-document-uploader/egov-du/document/_search",
      create: "/egov-document-uploader/egov-du/document/_create",
      delete: "/egov-document-uploader/egov-du/document/_delete",
      update: "/egov-document-uploader/egov-du/document/_update"
    },
    surveys: {
      create: "/egov-survey-services/egov-ss/survey/_create",
      update: "/egov-survey-services/egov-ss/survey/_update",
      search: "/egov-survey-services/egov-ss/survey/_search",
      delete: "/egov-survey-services/egov-ss/survey/_delete",
      submitResponse: "/egov-survey-services/egov-ss/survey/response/_submit",
      showResults: "/egov-survey-services/egov-ss/survey/response/_results"
    }
  },
  attendencemgmt: {
    mustorRoll: {
      estimate: "/muster-roll/v1/_estimate",
      create: "/muster-roll/v1/_create",
      update: "/muster-roll/v1/_update",
      search: "/muster-roll/v1/_search"
    }
  },
  noc: {
    nocSearch: "/noc-services/v1/noc/_search"
  },
  reports: {
    reportSearch: "/report/"
  },
  bills: {
    cancelBill: "/billing-service/bill/v2/_cancelbill"
  },
  access_control: "/access/v1/actions/mdms/_get",
  billgenie: "/egov-searcher"
};
/* harmony default export */ __webpack_exports__["a"] = (Urls);

/***/ }),

/***/ "../libraries/src/services/elements/MDMS.js":
/*!**************************************************!*\
  !*** ../libraries/src/services/elements/MDMS.js ***!
  \**************************************************/
/*! exports provided: getGeneralCriteria, getMultipleTypes, getMultipleTypesWithFilter, MdmsService */
/*! exports used: MdmsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getGeneralCriteria */
/* unused harmony export getMultipleTypes */
/* unused harmony export getMultipleTypesWithFilter */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MdmsService; });
/* harmony import */ var _atoms_ApiCacheService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atoms/ApiCacheService */ "../libraries/src/services/atoms/ApiCacheService.js");
/* harmony import */ var _atoms_urls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../atoms/urls */ "../libraries/src/services/atoms/urls.js");
/* harmony import */ var _atoms_Utils_Request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../atoms/Utils/Request */ "../libraries/src/services/atoms/Utils/Request.js");
/* harmony import */ var _atoms_Utils_Storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../atoms/Utils/Storage */ "../libraries/src/services/atoms/Utils/Storage.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
//HAVE TO CHANGE THI





// export const stringReplaceAll = (str = "", searcher = "", replaceWith = "") => {
//   if (searcher == "") return str;
//   while (str.includes(searcher)) {
//     str = str.replace(searcher, replaceWith);
//   }
//   return str;
// };

var SortByName = function (na, nb) {
  if (na < nb) {
    return -1;
  }
  if (na > nb) {
    return 1;
  }
  return 0;
};
var GetCitiesWithi18nKeys = function (MdmsRes, moduleCode) {
  var cityList = MdmsRes.tenant.citymodule && MdmsRes.tenant.citymodule.find(function (module) {
    return module.code === moduleCode;
  }).tenants || [];
  var citiesMap = cityList.map(function (city) {
    return city.code;
  });
  var cities = MdmsRes.tenant.tenants.filter(function (city) {
    return citiesMap.includes(city.code);
  }).map(function (_ref) {
    var code = _ref.code,
      name = _ref.name,
      logoId = _ref.logoId,
      emailId = _ref.emailId,
      address = _ref.address,
      contactNumber = _ref.contactNumber;
    return {
      code: code,
      name: name,
      logoId: logoId,
      emailId: emailId,
      address: address,
      contactNumber: contactNumber,
      i18nKey: "TENANT_TENANTS_" + code.replace(".", "_").toUpperCase()
    };
  }).sort(function (cityA, cityB) {
    var na = cityA.name.toLowerCase(),
      nb = cityB.name.toLowerCase();
    return SortByName(na, nb);
  });
  return cities;
};
var initRequestBody = function (tenantId) {
  return {
    MdmsCriteria: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: "common-masters",
        masterDetails: [{
          name: "Department"
        }, {
          name: "Designation"
        }, {
          name: "StateInfo"
        }, {
          name: "wfSlaConfig"
        }, {
          name: "uiHomePage"
        }]
      }, {
        moduleName: "tenant",
        masterDetails: [{
          name: "tenants"
        }, {
          name: "citymodule"
        }]
      }, {
        moduleName: "DIGIT-UI",
        masterDetails: [{
          name: "ApiCachingSettings"
        }]
      }]
    }
  };
};
var getCriteria = function (tenantId, moduleDetails) {
  return {
    MdmsCriteria: Object.assign({
      tenantId: tenantId
    }, moduleDetails)
  };
};
var getGeneralCriteria = function (tenantId, moduleCode, type) {
  return {
    details: {
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: type
        }]
      }]
    }
  };
};
var getMultipleTypes = function (tenantId, moduleCode, types) {
  return {
    details: {
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: types.map(function (type) {
          return {
            name: type
          };
        })
      }]
    }
  };
};
var getMultipleTypesWithFilter = function (moduleCode, masterDetails) {
  return {
    details: {
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: masterDetails
      }]
    }
  };
};
var getReceiptKey = function (tenantId, moduleCode) {
  return {
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "uiCommonPay"
        }]
      }]
    }
  };
};
var getBillsGenieKey = function (tenantId, moduleCode) {
  return {
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "BusinessService"
        }]
      }, {
        moduleName: "tenant",
        masterDetails: [{
          name: "tenants"
        }, {
          name: "citymodule"
        }]
      }, {
        moduleName: "common-masters",
        masterDetails: [{
          name: "uiCommonPay"
        }]
      }]
    }
  };
};
var getModuleServiceDefsCriteria = function (tenantId, moduleCode) {
  return {
    type: "serviceDefs",
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: `RAINMAKER-${moduleCode}`,
        masterDetails: [{
          name: "ServiceDefs"
        }]
      }]
    }
  };
};
var getSanitationTypeCriteria = function (tenantId, moduleCode) {
  return {
    type: "SanitationType",
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "SanitationType",
          filter: null
        }]
      }]
    }
  };
};
var getPitTypeCriteria = function (tenantId, moduleCode) {
  return {
    type: "PitType",
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "PitType",
          filter: null
        }]
      }]
    }
  };
};
var getApplicationChannelCriteria = function (tenantId, moduleCode) {
  return {
    type: "ApplicationChannel",
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "ApplicationChannel",
          filter: null
        }]
      }]
    }
  };
};
var getPropertyTypeCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "PropertyType",
          filter: null
        }]
      }]
    }
  };
};
var getPropertyUsageCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "PropertyType",
          filter: null
        }]
      }]
    }
  };
};
var getCommonFieldsCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "CommonFieldsConfig",
          filter: null
        }]
      }]
    }
  };
};
var getPreFieldsCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "PreFieldsConfig",
          filter: null
        }]
      }]
    }
  };
};
var getPostFieldsCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "PostFieldsConfig",
          filter: null
        }]
      }]
    }
  };
};
var getConfig = function (tenantId, moduleCode) {
  return {
    type: "Config",
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "Config"
        }]
      }]
    }
  };
};
var getVehicleTypeCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "VehicleMakeModel",
          filter: null
        }]
      }]
    }
  };
};
var getChecklistCriteria = function (tenantId, moduleCode) {
  return {
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "CheckList",
          filter: null
        }]
      }]
    }
  };
};
var getSlumLocalityCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "Slum"
        }]
      }]
    }
  };
};
var getPropertyOwnerTypeCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "OwnerType"
        }]
      }]
    }
  };
};
var getSubPropertyOwnerShipCategoryCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "SubOwnerShipCategory"
        }]
      }]
    }
  };
};
var getPropertyOwnerShipCategoryCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "OwnerShipCategory"
        }]
      }]
    }
  };
};
var getTradeOwnerShipCategoryCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "OwnerShipCategory"
        }]
      }]
    }
  };
};
var getDocumentRequiredScreenCategory = function (tenantId, moduleCode) {
  return {
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "Documents"
        }]
      }]
    }
  };
};
var getDefaultMapConfig = function (tenantId, moduleCode) {
  return {
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "MapConfig"
        }]
      }]
    }
  };
};
var getUsageCategoryList = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "UsageCategory"
        }]
      }]
    }
  };
};
var getPTPropertyTypeList = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "PropertyType"
        }]
      }]
    }
  };
};
var getTLStructureTypeList = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "StructureType"
        }]
      }]
    }
  };
};
var getTLAccessoriesTypeList = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "AccessoriesCategory"
        }]
      }]
    }
  };
};
var getTLFinancialYearList = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "FinancialYear",
          filter: `[?(@.module == "TL")]`
        }]
      }]
    }
  };
};
var getPTFloorList = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "Floor"
        }]
      }]
    }
  };
};
var getReasonCriteria = function (tenantId, moduleCode, type, payload) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: payload.map(function (mdmsLoad) {
          return {
            name: mdmsLoad
          };
        })
      }]
    }
  };
};
var getBillingServiceForBusinessServiceCriteria = function (filter) {
  return {
    moduleDetails: [{
      moduleName: "BillingService",
      masterDetails: [{
        name: "BusinessService",
        filter: filter
      }, {
        name: "TaxHeadMaster"
      }, {
        name: "TaxPeriod"
      }]
    }]
  };
};
var getRoleStatusCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "RoleStatusMapping",
          filter: null
        }]
      }]
    }
  };
};
var getRentalDetailsCategoryCriteria = function (tenantId, moduleCode) {
  return {
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "RentalDetails"
        }]
      }]
    }
  };
};
var getChargeSlabsCategoryCriteria = function (tenantId, moduleCode) {
  return {
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "ChargeSlabs"
        }]
      }]
    }
  };
};
var getGenderTypeList = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "GenderType"
        }]
      }]
    }
  };
};
var getMeterStatusTypeList = function (tenantId) {
  return {
    moduleDetails: [{
      moduleName: "ws-services-calculation",
      masterDetails: [{
        name: "MeterStatus",
        filter: `$.*.name`
      }]
    }]
  };
};
var getBillingPeriodValidation = function (tenantId) {
  return {
    moduleDetails: [{
      moduleName: "ws-services-masters",
      masterDetails: [{
        name: "billingPeriod",
        filter: "*"
      }]
    }]
  };
};
var getDssDashboardCriteria = function (tenantId, moduleCode) {
  return {
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "dashboard-config"
        }]
      }]
    }
  };
};
var getMCollectBillingServiceCriteria = function (tenantId, moduleCode, type, filter) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "BusinessService",
          filter: filter
        }]
      }]
    }
  };
};
var getTradeUnitsDataList = function (tenantId, moduleCode, type, filter) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "TradeType",
          filter: filter
        }]
      }]
    }
  };
};
var getMCollectApplicationStatusCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "applicationStatus"
        }]
      }]
    }
  };
};
var getHrmsEmployeeRolesandDesignations = function () {
  return {
    moduleDetails: [{
      moduleName: "common-masters",
      masterDetails: [{
        name: "Department",
        filter: "[?(@.active == true)]"
      }, {
        name: "Designation",
        filter: "[?(@.active == true)]"
      }]
    }, {
      moduleName: "tenant",
      masterDetails: [{
        name: "tenants"
      }]
    }, {
      moduleName: "ACCESSCONTROL-ROLES",
      masterDetails: [{
        name: "roles",
        filter: "$.[?(@.code!='CITIZEN')]"
      }]
    }, {
      moduleName: "egov-location",
      masterDetails: [{
        name: "TenantBoundary"
      }]
    }]
  };
};
var getFSTPPlantCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "FSTPPlantInfo"
        }]
      }]
    }
  };
};
var getCancelReceiptReason = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "CancelReceiptReason"
        }]
      }]
    }
  };
};
var getReceiptStatus = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "ReceiptStatus"
        }]
      }]
    }
  };
};
var getCancelReceiptReasonAndStatus = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "ReceiptStatus"
        }, {
          name: "uiCommonPay"
        }]
      }]
    }
  };
};
var getDocumentTypesCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "DocTypeMapping"
        }]
      }]
    }
  };
};
var getTradeTypeRoleCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "TradeTypetoRoleMapping"
        }]
      }]
    }
  };
};
var getFSTPORejectionReasonCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "FSTPORejectionReason",
          filter: null
        }]
      }]
    }
  };
};
var getFSMPaymentTypeCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "PaymentType",
          filter: null
        }]
      }]
    }
  };
};
var getFSMTripNumberCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "TripNumber",
          filter: null
        }]
      }]
    }
  };
};
var getFSMReceivedPaymentTypeCriteria = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: moduleCode,
        masterDetails: [{
          name: "ReceivedPaymentType",
          filter: null
        }]
      }]
    }
  };
};
var getWSTaxHeadMasterCritera = function (tenantId, moduleCode, type) {
  return {
    type: type,
    details: {
      tenantId: tenantId,
      moduleDetails: [{
        moduleName: "BillingService",
        masterDetails: [{
          name: "TaxHeadMaster",
          filter: null
        }]
      }]
    }
  };
};
var getHowItWorksJSON = function (tenantId) {
  return {
    moduleDetails: [{
      moduleName: "common-masters",
      masterDetails: [{
        name: "howItWorks"
      }]
    }]
  };
};
var getFAQsJSON = function (tenantId) {
  return {
    moduleDetails: [{
      moduleName: "common-masters",
      masterDetails: [{
        name: "faqs"
      }]
    }]
  };
};
var getDSSFAQsJSON = function (tenantId) {
  return {
    moduleDetails: [{
      moduleName: "dss-dashboard",
      masterDetails: [{
        name: "FAQs"
      }]
    }]
  };
};
var getDSSAboutJSON = function (tenantId) {
  return {
    moduleDetails: [{
      moduleName: "dss-dashboard",
      masterDetails: [{
        name: "About"
      }]
    }]
  };
};
var getStaticData = function () {
  return {
    moduleDetails: [{
      moduleName: "common-masters",
      masterDetails: [{
        name: "StaticData"
      }]
    }]
  };
};
var GetEgovLocations = function (MdmsRes) {
  return MdmsRes["egov-location"].TenantBoundary[0].boundary.children.map(function (obj) {
    return {
      name: obj.localname,
      i18nKey: obj.localname
    };
  });
};
var GetServiceDefs = function (MdmsRes, moduleCode) {
  return MdmsRes[`RAINMAKER-${moduleCode}`].ServiceDefs.filter(function (def) {
    return def.active;
  });
};
var GetSanitationType = function (MdmsRes) {
  return MdmsRes["FSM"].SanitationType.filter(function (type) {
    return type.active;
  });
};
var GetPitType = function (MdmsRes) {
  return MdmsRes["FSM"].PitType.filter(function (item) {
    return item.active;
  }).map(function (type) {
    return Object.assign({}, type, {
      i18nKey: `PITTYPE_MASTERS_${type.code}`
    });
  });
};
var GetApplicationChannel = function (MdmsRes) {
  return MdmsRes["FSM"].ApplicationChannel.filter(function (type) {
    return type.active;
  }).map(function (channel) {
    return Object.assign({}, channel, {
      i18nKey: `ES_APPLICATION_DETAILS_APPLICATION_CHANNEL_${channel.code}`
    });
  });
};
var GetPropertyType = function (MdmsRes) {
  return MdmsRes["FSM"].PropertyType.filter(function (property) {
    return property.active && !property.propertyType;
  }).map(function (item) {
    return Object.assign({}, item, {
      i18nKey: `PROPERTYTYPE_MASTERS_${item.code}`,
      code: item.code
    });
  });
};
var GetPropertySubtype = function (MdmsRes) {
  return MdmsRes["FSM"].PropertyType.filter(function (property) {
    return property.active && property.propertyType;
  }).map(function (item) {
    return Object.assign({}, item, {
      i18nKey: `PROPERTYTYPE_MASTERS_${item.code}`,
      code: item.code
    });
  });
};
var GetVehicleType = function (MdmsRes) {
  return MdmsRes["Vehicle"].VehicleMakeModel.filter(function (vehicle) {
    return vehicle.active;
  }).filter(function (vehicle) {
    return vehicle.make;
  }).map(function (vehicleDetails) {
    return Object.assign({}, vehicleDetails, {
      i18nKey: `COMMON_MASTER_VEHICLE_${vehicleDetails.code}`
    });
  });
};
var GetVehicleMakeModel = function (MdmsRes) {
  return MdmsRes["Vehicle"].VehicleMakeModel.filter(function (vehicle) {
    return vehicle.active;
  }).map(function (vehicleDetails) {
    return Object.assign({}, vehicleDetails, {
      i18nKey: `COMMON_MASTER_VEHICLE_${vehicleDetails.code}`
    });
  });
};
var GetSlumLocalityMapping = function (MdmsRes, tenantId) {
  return MdmsRes["FSM"].Slum.filter(function (type) {
    return type.active;
  }).reduce(function (prev, curr) {
    return prev[curr.locality] ? Object.assign({}, prev, {
      [curr.locality]: [].concat(_toConsumableArray(prev[curr.locality]), [Object.assign({}, curr, {
        i18nKey: `${tenantId.toUpperCase().replace(".", "_")}_${curr.locality}_${curr.code}`
      })])
    }) : Object.assign({}, prev, {
      [curr.locality]: [Object.assign({}, curr, {
        i18nKey: `${tenantId.toUpperCase().replace(".", "_")}_${curr.locality}_${curr.code}`
      })]
    });
  }, {});
};
var GetPropertyOwnerShipCategory = function (MdmsRes) {
  return MdmsRes["PropertyTax"].OwnerShipCategory.filter(function (ownerShip) {
    return ownerShip.active;
  }).map(function (ownerShipDetails) {
    return Object.assign({}, ownerShipDetails, {
      i18nKey: `COMMON_MASTER_OWNER_TYPE_${ownerShipDetails.code}`
    });
  });
};
var GetTradeOwnerShipCategory = function (MdmsRes) {
  return MdmsRes["common-masters"].OwnerShipCategory.filter(function (ownerShip) {
    return ownerShip.active;
  }).map(function (ownerShipDetails) {
    return Object.assign({}, ownerShipDetails, {
      i18nKey: `COMMON_MASTER_OWNER_TYPE_${ownerShipDetails.code}`
    });
  });
};
var GetPropertyOwnerType = function (MdmsRes) {
  return MdmsRes["PropertyTax"].OwnerType.filter(function (owner) {
    return owner.active;
  }).map(function (ownerDetails) {
    return Object.assign({}, ownerDetails, {
      i18nKey: `PROPERTYTAX_OWNERTYPE_${ownerDetails.code}`
    });
  });
};
var getSubPropertyOwnerShipCategory = function (MdmsRes) {
  MdmsRes["PropertyTax"].SubOwnerShipCategory.filter(function (category) {
    return category.active;
  }).map(function (subOwnerShipDetails) {
    return Object.assign({}, subOwnerShipDetails, {
      i18nKey: `PROPERTYTAX_BILLING_SLAB_${subOwnerShipDetails.code}`
    });
  });
  sessionStorage.setItem("getSubPropertyOwnerShipCategory", JSON.stringify(MdmsRes));
};
var getDocumentRequiredScreen = function (MdmsRes) {
  MdmsRes["PropertyTax"].Documents.filter(function (Documents) {
    return Documents.active;
  }).map(function (dropdownData) {
    return Object.assign({}, Documents, {
      i18nKey: `${dropdownData.code}`
    });
  });
};
var getTLDocumentRequiredScreen = function (MdmsRes) {
  MdmsRes["TradeLicense"].Documents.filter(function (Documents) {
    return Documents.active;
  }).map(function (dropdownData) {
    return Object.assign({}, Documents, {
      i18nKey: `${dropdownData.code}`
    });
  });
};
var getMapConfig = function (MdmsRes) {
  MdmsRes["PropertyTax"].MapConfig.filter(function (MapConfig) {
    return MapConfig;
  }).map(function (MapData) {
    return Object.assign({}, MapConfig, {
      defaultconfig: MapData.defaultConfig
    });
  });
};
var getUsageCategory = function (MdmsRes) {
  return MdmsRes["PropertyTax"].UsageCategory.filter(function (UsageCategory) {
    return UsageCategory.active;
  }).map(function (UsageCategorylist) {
    return Object.assign({}, UsageCategorylist, {
      i18nKey: `PROPERTYTAX_BILLING_SLAB_${UsageCategorylist.code}`
    });
  });
};
var getPTPropertyType = function (MdmsRes) {
  return MdmsRes["PropertyTax"].UsageCategory.filter(function (PropertyType) {
    return PropertyType.active;
  }).map(function (PTPropertyTypelist) {
    return Object.assign({}, UsageCategorylist, {
      i18nKey: `COMMON_PROPTYPE_${Digit.Utils.locale.stringReplaceAll(PTPropertyTypelist.code, ".", "_")}`
    });
  });
};
var getTLStructureType = function (MdmsRes) {
  return MdmsRes["common-masters"].StructureType.filter(function (StructureType) {
    return StructureType.active;
  }).map(function (TLStructureTypeList) {
    return Object.assign({}, TLStructureTypeList, {
      i18nKey: `COMMON_MASTERS_STRUCTURETYPE_${Digit.Utils.locale.stringReplaceAll(TLStructureTypeList.code, ".", "_")}`
    });
  });
};
var getTLAccessoriesType = function (MdmsRes) {
  return MdmsRes["TradeLicense"].AccessoriesCategory.filter(function (AccessoriesCategory) {
    return AccessoriesCategory.active;
  }).map(function (TLAccessoryTypeList) {
    return Object.assign({}, TLAccessoryTypeList, {
      i18nKey: `TRADELICENSE_ACCESSORIESCATEGORY_${Digit.Utils.locale.stringReplaceAll(TLAccessoryTypeList.code, ".", "_")}`
    });
  });
};
var getTLFinancialYear = function (MdmsRes) {
  return MdmsRes["egf-master"].FinancialYear.filter(function (FinancialYear) {
    return FinancialYear.active && FinancialYear.module === "TL";
  }).map(function (FinancialYearList) {
    return Object.assign({}, FinancialYearList);
  });
};
var getFloorList = function (MdmsRes) {
  return MdmsRes["PropertyTax"].Floor.filter(function (PTFloor) {
    return PTFloor.active;
  }).map(function (PTFloorlist) {
    return Object.assign({}, PTFloorlist, {
      i18nKey: `PROPERTYTAX_FLOOR_${PTFloorlist.code}`
    });
  });
};
var GetReasonType = function (MdmsRes, type, moduleCode) {
  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.keys(MdmsRes[moduleCode]).map(function (collection) {
    return {
      [collection]: MdmsRes[moduleCode][collection].filter(function (reason) {
        return reason.active;
      }).map(function (reason) {
        return Object.assign({}, reason, {
          i18nKey: `ES_ACTION_REASON_${reason.code}`
        });
      })
    };
  }))));
};
var getRentalDetailsCategory = function (MdmsRes) {
  MdmsRes["PropertyTax"].RentalDetails.filter(function (category) {
    return category.active;
  }).map(function (RentalDetailsInfo) {
    return Object.assign({}, RentalDetailsInfo, {
      i18nKey: `PROPERTYTAX_BILLING_SLAB_${RentalDetailsInfo.code}`
    });
  });
};
var getChargeSlabsCategory = function (MdmsRes) {
  MdmsRes["PropertyTax"].ChargeSlabs.filter(function (category) {
    return category.active;
  }).map(function (ChargeSlabsInfo) {
    return Object.assign({}, ChargeSlabsInfo);
  });
};
var getGenderType = function (MdmsRes) {
  return MdmsRes["common-masters"].GenderType.filter(function (GenderType) {
    return GenderType.active;
  }).map(function (genderDetails) {
    return Object.assign({}, genderDetails, {
      i18nKey: `PT_COMMON_GENDER_${genderDetails.code}`
    });
  });
  //return MdmsRes;
};

var TLGenderType = function (MdmsRes) {
  MdmsRes["common-masters"].GenderType.filter(function (GenderType) {
    return GenderType.active;
  }).map(function (genders) {
    return Object.assign({}, genders, {
      i18nKey: `TL_GENDER_${genders.code}`
    });
  });
};
var PTGenderType = function (MdmsRes) {
  MdmsRes["common-masters"].GenderType.filter(function (GenderType) {
    return GenderType.active;
  }).map(function (formGender) {
    return Object.assign({}, formGender, {
      i18nKey: `PT_FORM3_${formGender.code}`
    });
  });
};
var HRGenderType = function (MdmsRes) {
  MdmsRes["common-masters"].GenderType.filter(function (GenderType) {
    return GenderType.active;
  }).map(function (comGender) {
    return Object.assign({}, comGender, {
      i18nKey: `COMMON_GENDER_${comGender.code}`
    });
  });
};
var GetMCollectBusinessService = function (MdmsRes) {
  return MdmsRes["BillingService"].BusinessService.map(function (businesServiceDetails) {
    return Object.assign({}, businesServiceDetails, {
      i18nKey: `BILLINGSERVICE_BUSINESSSERVICE_${businesServiceDetails.code}`
    });
  });
};
var GetMCollectApplicationStatus = function (MdmsRes) {
  return MdmsRes["mCollect"].applcationStatus.map(function (appStatusDetails) {
    return Object.assign({}, appStatusDetails, {
      i18nKey: `BILLINGSERVICE_BUSINESSSERVICE_${appStatusDetails.code}`
    });
  });
};
var getFSMGenderType = function (MdmsRes) {
  return MdmsRes["common-masters"].GenderType.map(function (genderDetails) {
    return Object.assign({}, genderDetails, {
      i18nKey: `COMMON_GENDER_${genderDetails.code}`
    });
  });
};
var GetFSTPORejectionReason = function (MdmsRes) {
  return MdmsRes["Vehicle"].FSTPORejectionReason.filter(function (reason) {
    return reason.active;
  }).map(function (reasonDetails) {
    return Object.assign({}, reasonDetails, {
      i18nKey: `ES_ACTION_REASON_${reasonDetails.code}`
    });
  });
};
var GetPaymentType = function (MdmsRes) {
  return MdmsRes["FSM"].PaymentType.filter(function (option) {
    return option.active;
  }).map(function (reasonDetails) {
    return Object.assign({}, reasonDetails, {
      i18nKey: `ES_ACTION_${reasonDetails.code}`
    });
  });
};
var GetTripNumber = function (MdmsRes) {
  return MdmsRes["FSM"].TripNumber.filter(function (option) {
    return option.active;
  }).map(function (reasonDetails) {
    return Object.assign({}, reasonDetails, {
      i18nKey: `ES_ACTION_TRIP_${reasonDetails.code}`
    });
  });
};
var GetReceivedPaymentType = function (MdmsRes) {
  return MdmsRes["FSM"].ReceivedPaymentType.filter(function (option) {
    return option.active;
  }).map(function (reasonDetails) {
    return Object.assign({}, reasonDetails, {
      i18nKey: `ES_ACTION_${reasonDetails.code}`
    });
  });
};
var getDssDashboard = function (MdmsRes) {
  return MdmsRes["dss-dashboard"]["dashboard-config"];
};
var GetRoleStatusMapping = function (MdmsRes) {
  return MdmsRes["DIGIT-UI"].RoleStatusMapping;
};
var GetCommonFields = function (MdmsRes, moduleCode) {
  return moduleCode.toUpperCase() === "PROPERTYTAX" ? MdmsRes["PropertyTax"].CommonFieldsConfig : MdmsRes["FSM"].CommonFieldsConfig;
};
var GetPreFields = function (MdmsRes) {
  return MdmsRes["FSM"].PreFieldsConfig;
};
var GetPostFields = function (MdmsRes) {
  return MdmsRes["FSM"].PostFieldsConfig;
};
var GetFSTPPlantInfo = function (MdmsRes) {
  var _MdmsRes$FSM;
  return (_MdmsRes$FSM = MdmsRes["FSM"]) === null || _MdmsRes$FSM === void 0 ? void 0 : _MdmsRes$FSM.FSTPPlantInfo;
};
var GetDocumentsTypes = function (MdmsRes) {
  return MdmsRes["BPA"].DocTypeMapping;
};
var GetChecklist = function (MdmsRes) {
  return MdmsRes["BPA"].CheckList;
};
var transformResponse = function (type, MdmsRes, moduleCode, tenantId) {
  switch (type) {
    case "citymodule":
      return GetCitiesWithi18nKeys(MdmsRes, moduleCode);
    case "egovLocation":
      return GetEgovLocations(MdmsRes);
    case "serviceDefs":
      return GetServiceDefs(MdmsRes, moduleCode);
    case "ApplicationChannel":
      return GetApplicationChannel(MdmsRes);
    case "SanitationType":
      return GetSanitationType(MdmsRes);
    case "PropertyType":
      return GetPropertyType(MdmsRes);
    case "PropertySubtype":
      return GetPropertySubtype(MdmsRes);
    case "PitType":
      return GetPitType(MdmsRes);
    case "VehicleType":
      return GetVehicleType(MdmsRes);
    case "VehicleMakeModel":
      return GetVehicleMakeModel(MdmsRes);
    case "Slum":
      return GetSlumLocalityMapping(MdmsRes, tenantId);
    case "OwnerShipCategory":
      return GetPropertyOwnerShipCategory(MdmsRes);
    case "TLOwnerShipCategory":
      return GetTradeOwnerShipCategory(MdmsRes);
    case "OwnerType":
      return GetPropertyOwnerType(MdmsRes);
    case "SubOwnerShipCategory":
      return getSubPropertyOwnerShipCategory(MdmsRes);
    case "Documents":
      return getDocumentRequiredScreen(MdmsRes);
    case "TLDocuments":
      return getTLDocumentRequiredScreen(MdmsRes);
    case "MapConfig":
      return getMapConfig(MdmsRes);
    case "UsageCategory":
      return getUsageCategory(MdmsRes);
    case "PTPropertyType":
      return getPTPropertyType(MdmsRes);
    case "StructureType":
      return getTLStructureType(MdmsRes);
    case "AccessoryCategory":
      return getTLAccessoriesType(MdmsRes);
    case "FinancialYear":
      return getTLFinancialYear(MdmsRes);
    case "Floor":
      return getFloorList(MdmsRes);
    case "Reason":
      return GetReasonType(MdmsRes, type, moduleCode);
    case "RoleStatusMapping":
      return GetRoleStatusMapping(MdmsRes);
    case "CommonFieldsConfig":
      return GetCommonFields(MdmsRes, moduleCode);
    case "PreFieldsConfig":
      return GetPreFields(MdmsRes);
    case "PostFieldsConfig":
      return GetPostFields(MdmsRes);
    case "RentalDeatils":
      return getRentalDetailsCategory(MdmsRes);
    case "ChargeSlabs":
      return getChargeSlabsCategory(MdmsRes);
    case "DssDashboard":
      return getDssDashboard(MdmsRes);
    case "BusinessService":
      return GetMCollectBusinessService(MdmsRes);
    case "applcatonStatus":
      return GetMCollectApplicationStatus(MdmsRes);
    case "FSTPPlantInfo":
      return GetFSTPPlantInfo(MdmsRes);
    case "GenderType":
      return getGenderType(MdmsRes);
    case "TLGendertype":
      return TLGenderType(MdmsRes);
    case "PTGenderType":
      return PTGenderType(MdmsRes);
    case "HRGenderType":
      return HRGenderType(MdmsRes);
    case "DocumentTypes":
      return GetDocumentsTypes(MdmsRes);
    case "CheckList":
      return GetChecklist(MdmsRes);
    case "FSMGenderType":
      return getFSMGenderType(MdmsRes);
    case "FSTPORejectionReason":
      return GetFSTPORejectionReason(MdmsRes);
    case "PaymentType":
      return GetPaymentType(MdmsRes);
    case "TripNumber":
      return GetTripNumber(MdmsRes);
    case "ReceivedPaymentType":
      return GetReceivedPaymentType(MdmsRes);
    default:
      return MdmsRes;
  }
};
var getCacheSetting = function (moduleName) {
  return _atoms_ApiCacheService__WEBPACK_IMPORTED_MODULE_0__[/* ApiCacheService */ "a"].getSettingByServiceUrl(_atoms_urls__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].MDMS, moduleName);
};
var mergedData = {};
var mergedPromises = {};
var callAllPromises = function (success) {
  var promises = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var resData = arguments.length > 2 ? arguments[2] : undefined;
  promises.forEach(function (promise) {
    if (success) {
      promise.resolve(resData);
    } else {
      promise.reject(resData);
    }
  });
};
var mergeMDMSData = function (data, tenantId) {
  if (!mergedData[tenantId] || Object.keys(mergedData[tenantId]).length === 0) {
    mergedData[tenantId] = data;
  } else {
    data.MdmsCriteria.moduleDetails.forEach(function (dataModuleDetails) {
      var moduleName = dataModuleDetails.moduleName;
      var masterDetails = dataModuleDetails.masterDetails;
      var found = false;
      mergedData[tenantId].MdmsCriteria.moduleDetails.forEach(function (moduleDetail) {
        if (moduleDetail.moduleName === moduleName) {
          found = true;
          moduleDetail.masterDetails = [].concat(_toConsumableArray(moduleDetail.masterDetails), _toConsumableArray(masterDetails));
        }
      });
      if (!found) {
        mergedData[tenantId].MdmsCriteria.moduleDetails.push(dataModuleDetails);
      }
    });
  }
};
var debouncedCall = function (_ref2, resolve, reject) {
  var serviceName = _ref2.serviceName,
    url = _ref2.url,
    data = _ref2.data,
    useCache = _ref2.useCache,
    params = _ref2.params;
  if (!mergedPromises[params.tenantId] || mergedPromises[params.tenantId].length === 0) {
    var cacheSetting = getCacheSetting();
    setTimeout(function () {
      var callData = JSON.parse(JSON.stringify(mergedData[params.tenantId]));
      mergedData[params.tenantId] = {};
      var callPromises = _toConsumableArray(mergedPromises[params.tenantId]);
      mergedPromises[params.tenantId] = [];
      Object(_atoms_Utils_Request__WEBPACK_IMPORTED_MODULE_2__[/* ServiceRequest */ "a"])({
        serviceName: serviceName,
        url: url,
        data: callData,
        useCache: useCache,
        params: params
      }).then(function (data) {
        callAllPromises(true, callPromises, data);
      }).catch(function (err) {
        callAllPromises(false, callPromises, err);
      });
    }, cacheSetting.debounceTimeInMS || 500);
  }
  mergeMDMSData(data, params.tenantId);
  if (!mergedPromises[params.tenantId]) {
    mergedPromises[params.tenantId] = [];
  }
  mergedPromises[params.tenantId].push({
    resolve: resolve,
    reject: reject
  });
};
var MdmsService = {
  init: function (stateCode) {
    return Object(_atoms_Utils_Request__WEBPACK_IMPORTED_MODULE_2__[/* ServiceRequest */ "a"])({
      serviceName: "mdmsInit",
      url: _atoms_urls__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].MDMS,
      data: initRequestBody(stateCode),
      useCache: true,
      params: {
        tenantId: stateCode
      }
    });
  },
  call: function (tenantId, details) {
    return new Promise(function (resolve, reject) {
      return debouncedCall({
        serviceName: "mdmsCall",
        url: _atoms_urls__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].MDMS,
        data: getCriteria(tenantId, details),
        useCache: true,
        params: {
          tenantId: tenantId
        }
      }, resolve, reject);
    });
  },
  getDataByCriteria: async function (tenantId, mdmsDetails, moduleCode) {
    var key = `MDMS.${tenantId}.${moduleCode}.${mdmsDetails.type}.${JSON.stringify(mdmsDetails.details)}`;
    var inStoreValue = _atoms_Utils_Storage__WEBPACK_IMPORTED_MODULE_3__[/* PersistantStorage */ "a"].get(key);
    if (inStoreValue) {
      return inStoreValue;
    }
    var _await$MdmsService$ca = await MdmsService.call(tenantId, mdmsDetails.details),
      MdmsRes = _await$MdmsService$ca.MdmsRes;
    var responseValue = transformResponse(mdmsDetails.type, MdmsRes, moduleCode.toUpperCase(), tenantId);
    var cacheSetting = getCacheSetting(mdmsDetails.details.moduleDetails[0].moduleName);
    _atoms_Utils_Storage__WEBPACK_IMPORTED_MODULE_3__[/* PersistantStorage */ "a"].set(key, responseValue, cacheSetting.cacheTimeInSecs);
    return responseValue;
  },
  getServiceDefs: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getModuleServiceDefsCriteria(tenantId, moduleCode), moduleCode);
  },
  getSanitationType: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getSanitationTypeCriteria(tenantId, moduleCode), moduleCode);
  },
  getApplicationChannel: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getApplicationChannelCriteria(tenantId, moduleCode), moduleCode);
  },
  getPropertyType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getPropertyTypeCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getPropertyUsage: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getPropertyUsageCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getPropertySubtype: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getPropertyTypeCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getPitType: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getPitTypeCriteria(tenantId, moduleCode), moduleCode);
  },
  getVehicleType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getVehicleTypeCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getChecklist: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getChecklistCriteria(tenantId, moduleCode), moduleCode);
  },
  getPaymentRules: function (tenantId, filter) {
    return MdmsService.call(tenantId, getBillingServiceForBusinessServiceCriteria(filter));
  },
  getCustomizationConfig: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getConfig(tenantId, moduleCode), moduleCode);
  },
  getSlumLocalityMapping: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getSlumLocalityCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getReason: function (tenantId, moduleCode, type, payload) {
    return MdmsService.getDataByCriteria(tenantId, getReasonCriteria(tenantId, moduleCode, type, payload), moduleCode);
  },
  getRoleStatus: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getRoleStatusCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getCommonFieldsConfig: function (tenantId, moduleCode, type, payload) {
    return MdmsService.getDataByCriteria(tenantId, getCommonFieldsCriteria(tenantId, moduleCode, type, payload), moduleCode);
  },
  getPreFieldsConfig: function (tenantId, moduleCode, type, payload) {
    return MdmsService.getDataByCriteria(tenantId, getPreFieldsCriteria(tenantId, moduleCode, type, payload), moduleCode);
  },
  getPostFieldsConfig: function (tenantId, moduleCode, type, payload) {
    return MdmsService.getDataByCriteria(tenantId, getPostFieldsCriteria(tenantId, moduleCode, type, payload), moduleCode);
  },
  getPropertyOwnerShipCategory: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getPropertyOwnerShipCategoryCriteria(tenantId, moduleCode, type), moduleCode);
  },
  GetTradeOwnerShipCategory: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getTradeOwnerShipCategoryCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getPropertyOwnerType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getPropertyOwnerTypeCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getPropertySubOwnerShipCategory: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getSubPropertyOwnerShipCategoryCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getDocumentRequiredScreen: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getDocumentRequiredScreenCategory(tenantId, moduleCode), moduleCode);
  },
  getTLDocumentRequiredScreen: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getDocumentRequiredScreenCategory(tenantId, moduleCode), moduleCode);
  },
  getTradeUnitsData: function (tenantId, moduleCode, type, filter) {
    return MdmsService.getDataByCriteria(tenantId, getTradeUnitsDataList(tenantId, moduleCode, type, filter), moduleCode);
  },
  getMapConfig: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getDefaultMapConfig(tenantId, moduleCode), moduleCode);
  },
  getUsageCategory: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getUsageCategoryList(tenantId, moduleCode), moduleCode);
  },
  getPTPropertyType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getPTPropertyTypeList(tenantId, moduleCode), moduleCode);
  },
  getTLStructureType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getTLStructureTypeList(tenantId, moduleCode), moduleCode);
  },
  getTLAccessoriesType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getTLAccessoriesTypeList(tenantId, moduleCode), moduleCode);
  },
  getTLFinancialYear: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getTLFinancialYearList(tenantId, moduleCode), moduleCode);
  },
  getFloorList: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getPTFloorList(tenantId, moduleCode, type), moduleCode);
  },
  getRentalDetails: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getRentalDetailsCategoryCriteria(tenantId, moduleCode), moduleCode);
  },
  getChargeSlabs: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getChargeSlabsCategoryCriteria(tenantId, moduleCode), moduleCode);
  },
  getDssDashboard: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getDssDashboardCriteria(tenantId, moduleCode), moduleCode);
  },
  getPaymentGateway: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getGeneralCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getReceiptKey: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getReceiptKey(tenantId, moduleCode), moduleCode);
  },
  getHelpText: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getGeneralCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getMCollectBillingService: function (tenantId, moduleCode, type, filter) {
    return MdmsService.getDataByCriteria(tenantId, getMCollectBillingServiceCriteria(tenantId, moduleCode, type, filter), moduleCode);
  },
  getMCollectApplcationStatus: function (tenantId, moduleCode, type, filter) {
    return MdmsService.getDataByCriteria(tenantId, getMCollectApplicationStatusCriteria(tenantId, moduleCode, type, filter), moduleCode);
  },
  getHrmsEmployeeRolesandDesignation: function (tenantId) {
    return MdmsService.call(tenantId, getHrmsEmployeeRolesandDesignations());
  },
  getHrmsEmployeeTypes: function (tenantId, moduleCode, type, filter) {
    return MdmsService.getDataByCriteria(tenantId, getGeneralCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getHrmsEmployeeReason: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getGeneralCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getMultipleTypes: function (tenantId, moduleCode, types) {
    return MdmsService.getDataByCriteria(tenantId, getMultipleTypes(tenantId, moduleCode, types), moduleCode);
  },
  getMultipleTypesWithFilter: function (tenantId, moduleCode, types) {
    return MdmsService.getDataByCriteria(tenantId, getMultipleTypesWithFilter(moduleCode, types), moduleCode);
  },
  getFSTPPlantInfo: function (tenantId, moduleCode, types) {
    return MdmsService.getDataByCriteria(tenantId, getFSTPPlantCriteria(tenantId, moduleCode, types), moduleCode);
  },
  getCancelReceiptReason: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getCancelReceiptReason(tenantId, moduleCode), moduleCode);
  },
  getReceiptStatus: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getReceiptStatus(tenantId, moduleCode), moduleCode);
  },
  getCancelReceiptReasonAndStatus: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getCancelReceiptReasonAndStatus(tenantId, moduleCode), moduleCode);
  },
  getGenderType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getGenderTypeList(tenantId, moduleCode, type), moduleCode);
  },
  TLGenderType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getGenderTypeList(tenantId, moduleCode, type), moduleCode);
  },
  PTGenderType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getGenderTypeList(tenantId, moduleCode, type), moduleCode);
  },
  HRGenderType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getGenderTypeList(tenantId, moduleCode, type), moduleCode);
  },
  getDocumentTypes: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getDocumentTypesCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getTradeTypeRoleTypes: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getTradeTypeRoleCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getFSMGenderType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getGenderTypeList(tenantId, moduleCode, type), moduleCode);
  },
  getFSTPORejectionReason: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getFSTPORejectionReasonCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getFSMPaymentType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getFSMPaymentTypeCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getBillsGenieKey: function (tenantId, moduleCode) {
    return MdmsService.getDataByCriteria(tenantId, getBillsGenieKey(tenantId, moduleCode), moduleCode);
  },
  getFSMTripNumber: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getFSMTripNumberCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getFSMReceivedPaymentType: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getFSMReceivedPaymentTypeCriteria(tenantId, moduleCode, type), moduleCode);
  },
  getWSTaxHeadMaster: function (tenantId, moduleCode, type) {
    return MdmsService.getDataByCriteria(tenantId, getWSTaxHeadMasterCritera(tenantId, moduleCode, type), moduleCode);
  },
  getMeterStatusType: function (tenantId) {
    return MdmsService.call(tenantId, getMeterStatusTypeList(tenantId));
  },
  getBillingPeriod: function (tenantId) {
    return MdmsService.call(tenantId, getBillingPeriodValidation(tenantId));
  },
  getHowItWorksJSONData: function (tenantId) {
    return MdmsService.call(tenantId, getHowItWorksJSON(tenantId));
  },
  getFAQsJSONData: function (tenantId) {
    return MdmsService.call(tenantId, getFAQsJSON(tenantId));
  },
  getDSSFAQsJSONData: function (tenantId) {
    return MdmsService.call(tenantId, getDSSFAQsJSON(tenantId));
  },
  getDSSAboutJSONData: function (tenantId) {
    return MdmsService.call(tenantId, getDSSAboutJSON(tenantId));
  },
  getStaticDataJSON: function (tenantId) {
    return MdmsService.call(tenantId, getStaticData());
  }
};

/***/ }),

/***/ "./src/hoc/techHoc/useCustomMDMS.js":
/*!******************************************!*\
  !*** ./src/hoc/techHoc/useCustomMDMS.js ***!
  \******************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _egovernments_digit_ui_libraries_src_services_elements_MDMS__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @egovernments/digit-ui-libraries/src/services/elements/MDMS */ "../libraries/src/services/elements/MDMS.js");
/* harmony import */ var react_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-query */ "../../node_modules/react-query/es/react/useQuery.js");


// import { MdmsService } from "../services/elements/MDMS";
/**
 * Custom hook which can be used to
 * make a single hook a module to get multiple masterdetails with/without filter
 *
 * @author jagankumar-egov
 *
 * @example
 * // returns useQuery object
 * Digit.Hooks.useCustomMDMS(
 *          "stateid",
 *          "modulename",
 *          [
 *              { name:"masterdetail1",filter:"[?(@.active == true)]"},
 *              { name:"masterdetail2" }
 *          ],
 *          { // all configs supported by the usequery
 *              default:(data)=>{
 *                          format
 *                          return formattedData;
 *                          }
 *          })
 *
 * @returns {Object} Returns the object of the useQuery from react-query.
 */
var useCustomMDMS = function (tenantId, moduleName) {
  var masterDetails = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  return Object(react_query__WEBPACK_IMPORTED_MODULE_1__[/* useQuery */ "a"])([tenantId, moduleName, masterDetails], function () {
    return _egovernments_digit_ui_libraries_src_services_elements_MDMS__WEBPACK_IMPORTED_MODULE_0__[/* MdmsService */ "a"].getMultipleTypesWithFilter(tenantId, moduleName, masterDetails);
  }, config);
};
/* harmony default export */ __webpack_exports__["a"] = (useCustomMDMS);

/***/ })

})
//# sourceMappingURL=main.f3e70af4e2d75bb49788.hot-update.js.map
{"version":3,"file":"main.f3e70af4e2d75bb49788.hot-update.js","sources":["webpack:///../libraries/src/services/atoms/ApiCacheService.js","webpack:///../libraries/src/services/atoms/Utils/Request.js","webpack:///../libraries/src/services/atoms/Utils/Storage.js","webpack:///../libraries/src/services/atoms/urls.js","webpack:///../libraries/src/services/elements/MDMS.js","webpack:///./src/hoc/techHoc/useCustomMDMS.js"],"sourcesContent":["import { PersistantStorage } from \"./Utils/Storage\";\n\nconst defaultApiCachingSettings = [\n  {\n    serviceName: \"localization\",\n    cacheTimeInSecs: 86400,\n  },\n  {\n    serviceName: \"access/v1/actions\",\n    cacheTimeInSecs: 86400,\n  },\n  {\n    serviceName: \"user/_search\",\n    cacheTimeInSecs: 86400,\n  },\n  {\n    serviceName: \"egov-mdms-service\",\n    cacheTimeInSecs: 3600,\n    debounceTimeInMS: 100,\n    moduleSettings: [\n      {\n        moduleName: \"FSM\",\n        cacheTimeInSecs: 7200,\n      },\n    ],\n  },\n];\n\nconst storageKey = \"cachingService\";\nconst getCachedSetting = () => {\n  if (Digit.ApiCacheSetting) {\n    return Digit.ApiCacheSetting;\n  }\n  const setting = PersistantStorage.get(storageKey) || defaultApiCachingSettings;\n  Digit.ApiCacheSetting = setting;\n  return setting;\n};\nconst getSetting = (serviceName, moduleName) => {\n  const setting = getCachedSetting();\n  const serviceSetting = setting.find((item) => item.serviceName === serviceName);\n  const responseSetting = {\n    cacheTimeInSecs: serviceSetting.cacheTimeInSecs,\n    debounceTimeInMS: serviceSetting.debounceTimeInMS || 100,\n  };\n  if (!moduleName) {\n    return responseSetting;\n  }\n  const moduleSettings = serviceSetting?.moduleSettings?.find((item) => item.moduleName === moduleName);\n  if (!moduleSettings) {\n    return responseSetting;\n  }\n  return {\n    cacheTimeInSecs: moduleSettings.cacheTimeInSecs || responseSetting.cacheTimeInSecs,\n    debounceTimeInMS: moduleSettings.debounceTimeInMS || responseSetting.debounceTimeInMS,\n  };\n};\nexport const ApiCacheService = {\n  saveSetting: (setting) => {\n    PersistantStorage.set(storageKey, setting || defaultApiCachingSettings);\n  },\n  getSettingByServiceUrl: (serviceUrl, moduleName) => {\n    return getSetting(serviceUrl.split(\"/\")[1], moduleName);\n  },\n};\n","import Axios from \"axios\";\n\n/**\n * Custom Request to make all api calls\n *\n * @author jagankumar-egov\n *\n */\n\nAxios.interceptors.response.use(\n  (res) => res,\n  (err) => {\n    const isEmployee = window.location.pathname.split(\"/\").includes(\"employee\");\n    if (err?.response?.data?.Errors) {\n      for (const error of err.response.data.Errors) {\n        if (error.message.includes(\"InvalidAccessTokenException\")) {\n          localStorage.clear();\n          sessionStorage.clear();\n          window.location.href =\n          (isEmployee ? `/${window?.contextPath}/employee/user/login` : `/${window?.contextPath}/citizen/login`) +\n            `?from=${encodeURIComponent(window.location.pathname + window.location.search)}`;\n        } else if (\n          error?.message?.toLowerCase()?.includes(\"internal server error\") ||\n          error?.message?.toLowerCase()?.includes(\"some error occured\")\n        ) {\n          window.location.href =\n          (isEmployee ? `/${window?.contextPath}/employee/user/error` : `/${window?.contextPath}/citizen/error`) +\n                      `?type=maintenance&from=${encodeURIComponent(window.location.pathname + window.location.search)}`;\n        } else if (error.message.includes(\"ZuulRuntimeException\")) {\n          window.location.href =\n          (isEmployee ? `/${window?.contextPath}/employee/user/error` : `/${window?.contextPath}/citizen/error`) +\n                      `?type=notfound&from=${encodeURIComponent(window.location.pathname + window.location.search)}`;\n        }\n      }\n    }\n    throw err;\n  }\n);\n\nconst requestInfo = () => ({\n  authToken: Digit.UserService.getUser()?.access_token || null,\n});\n\nconst authHeaders = () => ({\n  \"auth-token\": Digit.UserService.getUser()?.access_token || null,\n});\n\nconst userServiceData = () => ({ userInfo: Digit.UserService.getUser()?.info });\n\nwindow.Digit = window.Digit || {};\nwindow.Digit = { ...window.Digit, RequestCache: window.Digit.RequestCache || {} };\nexport const Request = async ({\n  method = \"POST\",\n  url,\n  data = {},\n  headers = {},\n  useCache = false,\n  params = {},\n  auth,\n  urlParams = {},\n  userService,\n  locale = true,\n  authHeader = false,\n  setTimeParam = true,\n  userDownload = false,\n  noRequestInfo = false,\n  multipartFormData = false,\n  multipartData = {},\n  reqTimestamp = false,\n}) => {\n  const ts = new Date().getTime();\n  if (method.toUpperCase() === \"POST\") {\n   \n    data.RequestInfo = {\n      apiId: \"Rainmaker\",\n    };\n    if (auth || !!Digit.UserService.getUser()?.access_token) {\n      data.RequestInfo = { ...data.RequestInfo, ...requestInfo() };\n    }\n    if (userService) {\n      data.RequestInfo = { ...data.RequestInfo, ...userServiceData() };\n    }\n    if (locale) {\n      data.RequestInfo = { ...data.RequestInfo, msgId: `${ts}|${Digit.StoreData.getCurrentLanguage()}` };\n    }\n    \n    if (noRequestInfo) {\n      delete data.RequestInfo;\n    }\n\n    /* \n    Feature :: Privacy\n    \n    Desc :: To send additional field in HTTP Requests inside RequestInfo Object as plainAccessRequest\n    */\n    const privacy = Digit.Utils.getPrivacyObject();\n    if (privacy && !url.includes(\"/edcr/rest/dcr/\")) {\n      if(!noRequestInfo){\n      data.RequestInfo = { ...data.RequestInfo, plainAccessRequest: { ...privacy } };\n      }\n    }\n  }\n\n  const headers1 = {\n    \"Content-Type\": \"application/json\",\n    Accept: window?.globalConfigs?.getConfig(\"ENABLE_SINGLEINSTANCE\") ? \"application/pdf,application/json\" : \"application/pdf\",\n  };\n\n  if (authHeader) headers = { ...headers, ...authHeaders() };\n\n  if (userDownload) headers = { ...headers, ...headers1 };\n\n  let key = \"\";\n  if (useCache) {\n    key = `${method.toUpperCase()}.${url}.${btoa(escape(JSON.stringify(params, null, 0)))}.${btoa(escape(JSON.stringify(data, null, 0)))}`;\n    const value = window.Digit.RequestCache[key];\n    if (value) {\n      return value;\n    }\n  } else if (setTimeParam) {\n    params._ = Date.now();\n  }\n  if (reqTimestamp) {\n    data.RequestInfo = { ...data.RequestInfo, ts: Number(ts) };\n  }\n\n  let _url = url\n    .split(\"/\")\n    .map((path) => {\n      let key = path.split(\":\")?.[1];\n      return urlParams[key] ? urlParams[key] : path;\n    })\n    .join(\"/\");\n\n  if (multipartFormData) {\n    const multipartFormDataRes = await Axios({\n      method,\n      url: _url,\n      data: multipartData.data,\n      params,\n      headers: { \"Content-Type\": \"multipart/form-data\", \"auth-token\": Digit.UserService.getUser()?.access_token || null },\n    });\n    return multipartFormDataRes;\n  }\n  /* \n  Feature :: Single Instance\n\n  Desc :: Fix for central instance to send tenantID in all query params\n  */\n  const tenantInfo =\n    Digit.SessionStorage.get(\"userType\") === \"citizen\"\n      ? Digit.ULBService.getStateId()\n      : Digit.ULBService.getCurrentTenantId() || Digit.ULBService.getStateId();\n  if (!params[\"tenantId\"] && window?.globalConfigs?.getConfig(\"ENABLE_SINGLEINSTANCE\")) {\n    params[\"tenantId\"] = tenantInfo;\n  }\n\n  const res = userDownload\n    ? await Axios({ method, url: _url, data, params, headers, responseType: \"arraybuffer\" })\n    : await Axios({ method, url: _url, data, params, headers });\n\n  if (userDownload) return res;\n\n  const returnData = res?.data || res?.response?.data || {};\n  if (useCache && res?.data && Object.keys(returnData).length !== 0) {\n    window.Digit.RequestCache[key] = returnData;\n  }\n  return returnData;\n};\n\n/**\n *\n * @param {*} serviceName\n *\n * preHook:\n * ({params, data}) => ({params, data})\n *\n * postHook:\n * ({resData}) => ({resData})\n *\n */\n\nexport const ServiceRequest = async ({\n  serviceName,\n  method = \"POST\",\n  url,\n  data = {},\n  headers = {},\n  useCache = false,\n  params = {},\n  auth,\n  reqTimestamp,\n  userService,\n}) => {\n  const preHookName = `${serviceName}Pre`;\n  const postHookName = `${serviceName}Post`;\n\n  let reqParams = params;\n  let reqData = data;\n  if (window[preHookName] && typeof window[preHookName] === \"function\") {\n    let preHookRes = await window[preHookName]({ params, data });\n    reqParams = preHookRes.params;\n    reqData = preHookRes.data;\n  }\n  const resData = await Request({ method, url, data: reqData, headers, useCache, params: reqParams, auth, userService,reqTimestamp });\n\n  if (window[postHookName] && typeof window[postHookName] === \"function\") {\n    return await window[postHookName](resData);\n  }\n  return resData;\n};\n","const localStoreSupport = () => {\n  try {\n    return \"sessionStorage\" in window && window[\"sessionStorage\"] !== null;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst k = (key) => `Digit.${key}`;\nconst getStorage = (storageClass) => ({\n  get: (key) => {\n    if (localStoreSupport() && key) {\n      let valueInStorage = storageClass.getItem(k(key));\n      if (!valueInStorage || valueInStorage === \"undefined\") {\n        return null;\n      }\n      const item = JSON.parse(valueInStorage);\n      if (Date.now() > item.expiry) {\n        storageClass.removeItem(k(key));\n        return null;\n      }\n      return item.value;\n    } else if (typeof window !== \"undefined\") {\n      return window?.eGov?.Storage && window.eGov.Storage[k(key)].value;\n    } else {\n      return null;\n    }\n  },\n  set: (key, value, ttl = 86400) => {\n    const item = {\n      value,\n      ttl,\n      expiry: Date.now() + ttl * 1000,\n    };\n    if (localStoreSupport()) {\n      storageClass.setItem(k(key), JSON.stringify(item));\n    } else if (typeof window !== \"undefined\") {\n      window.eGov = window.eGov || {};\n      window.eGov.Storage = window.eGov.Storage || {};\n      window.eGov.Storage[k(key)] = item;\n    }\n  },\n  del: (key) => {\n    if (localStoreSupport()) {\n      storageClass.removeItem(k(key));\n    } else if (typeof window !== \"undefined\") {\n      window.eGov = window.eGov || {};\n      window.eGov.Storage = window.eGov.Storage || {};\n      delete window.eGov.Storage[k(key)];\n    }\n  },\n});\n\nexport const Storage = getStorage(window.sessionStorage);\nexport const PersistantStorage = getStorage(window.localStorage);\n","const Urls = {\n  MDMS: `/egov-mdms-service/v1/_search`,\n  WorkFlow: `/egov-workflow-v2/egov-wf/businessservice/_search`,\n  WorkFlowProcessSearch: `/egov-workflow-v2/egov-wf/process/_search`,\n  localization: `/localization/messages/v1/_search`,\n  location: {\n    localities: `/egov-location/location/v11/boundarys/_search?hierarchyTypeCode=ADMIN&boundaryType=Locality`,\n    wards: `/egov-location/location/v11/boundarys/_search?hierarchyTypeCode=ADMIN&boundaryType=Ward`,\n    revenue_localities: `/egov-location/location/v11/boundarys/_search?hierarchyTypeCode=REVENUE&boundaryType=Locality`,\n  },\n\n  pgr_search: `/pgr-services/v2/request/_search`,\n  pgr_update: `/pgr-services/v2/request/_update`,\n  filter_data: `https://run.mocky.io/v3/597a50a0-90e5-4a45-b82e-8a2186b760bd`,\n  FileStore: \"/filestore/v1/files\",\n\n  FileFetch: \"/filestore/v1/files/url\",\n  PGR_Create: `/pgr-services/v2/request/_create`,\n  pgr_count: `/pgr-services/v2/request/_count`,\n\n  OTP_Send: \"/user-otp/v1/_send\",\n  Authenticate: \"/user/oauth/token\",\n  RegisterUser: \"/user/citizen/_create\",\n  ChangePassword: \"/user/password/nologin/_update\",\n  ChangePassword1: \"/user/password/_update\",\n  UserProfileUpdate: \"/user/profile/_update\",\n  EmployeeSearch: \"/egov-hrms/employees/_search\",\n\n  InboxSearch: \"/works-inbox-service/v2/_search\",\n\n  UserSearch: \"/user/_search\",\n  UserLogout: \"/user/_logout\",\n\n  Shortener: \"/egov-url-shortening/shortener\",\n\n  works: {\n    create:\"/loi-service/v1/_create\",\n    estimateSearch:\"/estimate-service/estimate/v1/_search\",\n    loiSearch:\"/loi-service/v1/_search\",\n    createEstimate:\"/estimate-service/estimate/v1/_create\",\n    approvedEstimateSearch:\"/estimate-service/estimate/v1/_search\",\n    searchEstimate:\"/estimate-service/estimate/v1/_search\",\n    updateLOI:\"/loi-service/v1/_update\",\n    updateEstimate:\"/estimate-service/estimate/v1/_update\",\n    download_pdf:\"/egov-pdf/download/WORKSESTIMATE/estimatepdf\"\n  },\n\n  fsm: {\n    search: \"/fsm/v1/_search\",\n    create: \"/fsm/v1/_create\",\n    update: \"/fsm/v1/_update\",\n    vendorSearch: \"/vendor/v1/_search\",\n    vehicleSearch: \"/vehicle/v1/_search\",\n    audit: \"/fsm/v1/_audit\",\n    vehicleTripSearch: \"/vehicle/trip/v1/_search\",\n    billingSlabSearch: \"/fsm-calculator/v1/billingSlab/_search\",\n    vehilceUpdate: \"/vehicle/trip/v1/_update\",\n    createVendor: \"/vendor/v1/_create\",\n    updateVendor: \"/vendor/v1/_update\",\n    createVehicle: \"/vehicle/v1/_create\",\n    updateVehicle: \"/vehicle/v1/_update\",\n    driverSearch: \"/vendor/driver/v1/_search\",\n    createDriver: \"/vendor/driver/v1/_create\",\n    updateDriver: \"/vendor/driver/v1/_update\",\n    vehicleTripCreate: \"/vehicle/trip/v1/_create\",\n  },\n\n  payment: {\n    fetch_bill: \"/billing-service/bill/v2/_fetchbill\",\n    demandSearch: \"/billing-service/demand/_search\",\n    create_reciept: \"/collection-services/payments/_create\",\n    print_reciept: \"/collection-services/payments\",\n    generate_pdf: \"/pdf-service/v1/_create\",\n    create_citizen_reciept: \"/pg-service/transaction/v1/_create\",\n    update_citizen_reciept: \"/pg-service/transaction/v1/_update\",\n    search_bill: \"/billing-service/bill/v2/_search\",\n    reciept_search: \"/collection-services/payments/:buisnessService/_search\",\n    obps_Reciept_Search: \"/collection-services/payments/_search\",\n    billAmendmentSearch: \"/billing-service/amendment/_search\",\n    getBulkPdfRecordsDetails: \"/pdf-service/v1/_getBulkPdfRecordsDetails\",\n  },\n\n  pt: {\n    fectch_property: \"/property-services/property/_search\",\n    fetch_payment_details: \"/billing-service/bill/v2/_fetchbill\",\n    create: \"/property-services/property/_create\",\n    search: \"/property-services/property/_search\",\n    update: \"/property-services/property/_update\",\n    pt_calculation_estimate: \"/pt-calculator-v2/propertytax/v2/_estimate\",\n    assessment_create: \"/property-services/assessment/_create\",\n    assessment_search: \"/property-services/assessment/_search\",\n    payment_search: \"/collection-services/payments/PT/_search\",\n    pt_calculate_mutation: \"/pt-calculator-v2/propertytax/mutation/_calculate\",\n  },\n\n  dss: {\n    dashboardConfig: \"/dashboard-analytics/dashboard/getDashboardConfig\",\n    getCharts: \"/dashboard-analytics/dashboard/getChartV2\",\n  },\n\n  mcollect: {\n    search: \"/echallan-services/eChallan/v1/_search\",\n    create: \"/echallan-services/eChallan/v1/_create?\",\n    fetch_bill: \"/billing-service/bill/v2/_fetchbill?\",\n    search_bill: \"/egov-searcher/bill-genie/mcollectbills/_get\",\n    search_bill_pt: \"/egov-searcher/bill-genie/billswithaddranduser/_get\",\n    update: \"/echallan-services/eChallan/v1/_update\",\n    download_pdf: \"/egov-pdf/download/UC/mcollect-challan\",\n    receipt_download: \"/egov-pdf/download/PAYMENT/consolidatedreceipt\",\n    bill_download: \"/egov-pdf/download/BILL/consolidatedbill\",\n    count: \"/echallan-services/eChallan/v1/_count\",\n  },\n  hrms: {\n    search: \"/egov-hrms/employees/_search\",\n    count: \"/egov-hrms/employees/_count\",\n    create: \"/egov-hrms/employees/_create\",\n    update: \"/egov-hrms/employees/_update\",\n  },\n  tl: {\n    create: \"/tl-services/v1/_create\",\n    search: \"/tl-services/v1/_search\",\n    fetch_payment_details: \"/billing-service/bill/v2/_fetchbill\",\n    download_pdf: \"/egov-pdf/download/TL/\",\n    update: \"/tl-services/v1/_update\",\n    billingslab: \"/tl-calculator/billingslab/_search\",\n  },\n  receipts: {\n    receipt_download: \"/egov-pdf/download/PAYMENT/consolidatedreceipt\",\n    payments: \"/collection-services/payments\",\n    count: \"/egov-hrms/employees/_count\",\n  },\n  obps: {\n    scrutinyDetails: \"/edcr/rest/dcr/scrutinydetails\",\n    comparisionReport: \"/edcr/rest/dcr/occomparison\",\n    create: \"/bpa-services/v1/bpa/_create\",\n    nocSearch: \"/noc-services/v1/noc/_search\",\n    updateNOC: \"/noc-services/v1/noc/_update\",\n    update: \"/bpa-services/v1/bpa/_update\",\n    bpaSearch: \"/bpa-services/v1/bpa/_search\",\n    bpaRegSearch: \"/tl-services/v1/BPAREG/_search\",\n    bpaRegCreate: \"/tl-services/v1/BPAREG/_create\",\n    bpaRegGetBill: \"/tl-calculator/v1/BPAREG/_getbill\",\n    bpaRegUpdate: \"/tl-services/v1/BPAREG/_update\",\n    receipt_download: \"/egov-pdf/download/PAYMENT/consolidatedreceipt\",\n    edcrreportdownload: \"/bpa-services/v1/bpa/_permitorderedcr\",\n    getSearchDetails: \"/inbox/v1/dss/_search\"\n  },\n\n  edcr: {\n    create: \"/edcr/rest/dcr/scrutinize\",\n  },\n\n  events: {\n    search: \"/egov-user-event/v1/events/_search\",\n    update: \"/egov-user-event/v1/events/lat/_update\",\n    updateEvent: \"/egov-user-event/v1/events/_update\",\n    updateEventCDG: \"/egov-user-event/v1/events/lat/_update\",\n    count: \"/egov-user-event/v1/events/notifications/_count\",\n    create: \"/egov-user-event/v1/events/_create\",\n  },\n\n  ws: {\n    water_create: \"/ws-services/wc/_create\",\n    sewarage_create: \"/sw-services/swc/_create\",\n    water_search: \"/ws-services/wc/_search\",\n    sewarage_search: \"/sw-services/swc/_search\",\n    water_update: \"/ws-services/wc/_update\",\n    sewarage_update: \"/sw-services/swc/_update\",\n    ws_calculation_estimate: \"/ws-calculator/waterCalculator/_estimate\",\n    sw_calculation_estimate: \"/sw-calculator/sewerageCalculator/_estimate\",\n    ws_connection_search: \"/ws-calculator/meterConnection/_search\",\n    sw_payment_search: \"/collection-services/payments/SW/_search\",\n    ws_payment_search: \"/collection-services/payments/WS/_search\",\n    billAmendmentCreate: \"/billing-service/amendment/_create\",\n    billAmendmentUpdate: \"/billing-service/amendment/_update\",\n    ws_meter_conncetion_create: \"/ws-calculator/meterConnection/_create\",\n    sw_meter_conncetion_create: \"/sw-calculator/meterConnection/_create\",\n    wns_group_bill: \"/egov-pdf/download/WNS/wnsgroupbill\",\n    cancel_group_bill: \"/pdf-service/v1/_cancelProcess\",\n    wns_generate_pdf: \"/egov-pdf/download/WNS/wnsbill\",\n    water_applyAdhocTax : \"/ws-calculator/waterCalculator/_applyAdhocTax\",\n    sewerage_applyAdhocTax: \"/sw-calculator/sewerageCalculator/_applyAdhocTax\",\n    getSearchDetails: \"/inbox/v1/dss/_search\",\n  },\n\n  engagement: {\n    document: {\n      search: \"/egov-document-uploader/egov-du/document/_search\",\n      create: \"/egov-document-uploader/egov-du/document/_create\",\n      delete: \"/egov-document-uploader/egov-du/document/_delete\",\n      update: \"/egov-document-uploader/egov-du/document/_update\",\n    },\n    surveys: {\n      create: \"/egov-survey-services/egov-ss/survey/_create\",\n      update: \"/egov-survey-services/egov-ss/survey/_update\",\n      search: \"/egov-survey-services/egov-ss/survey/_search\",\n      delete: \"/egov-survey-services/egov-ss/survey/_delete\",\n      submitResponse: \"/egov-survey-services/egov-ss/survey/response/_submit\",\n      showResults: \"/egov-survey-services/egov-ss/survey/response/_results\",\n    },\n  },\n\n  attendencemgmt: {\n    mustorRoll: {\n      estimate: \"/muster-roll/v1/_estimate\",\n      create: \"/muster-roll/v1/_create\",\n      update: \"/muster-roll/v1/_update\",\n      search: \"/muster-roll/v1/_search\"\n    }\n  },\n\n  noc: {\n    nocSearch: \"/noc-services/v1/noc/_search\",\n  },\n  reports: {\n    reportSearch: \"/report/\",\n  },\n  bills:{\n    cancelBill:\"/billing-service/bill/v2/_cancelbill\"\n  },\n  access_control: \"/access/v1/actions/mdms/_get\",\n  billgenie: \"/egov-searcher\",\n};\n\nexport default Urls;\n","//HAVE TO CHANGE THI\nimport { ApiCacheService } from \"../atoms/ApiCacheService\";\nimport Urls from \"../atoms/urls\";\nimport { Request, ServiceRequest } from \"../atoms/Utils/Request\";\nimport { PersistantStorage } from \"../atoms/Utils/Storage\";\n\n// export const stringReplaceAll = (str = \"\", searcher = \"\", replaceWith = \"\") => {\n//   if (searcher == \"\") return str;\n//   while (str.includes(searcher)) {\n//     str = str.replace(searcher, replaceWith);\n//   }\n//   return str;\n// };\n\nconst SortByName = (na, nb) => {\n  if (na < nb) {\n    return -1;\n  }\n  if (na > nb) {\n    return 1;\n  }\n  return 0;\n};\n\nconst GetCitiesWithi18nKeys = (MdmsRes, moduleCode) => {\n  const cityList = (MdmsRes.tenant.citymodule && MdmsRes.tenant.citymodule.find((module) => module.code === moduleCode).tenants) || [];\n  const citiesMap = cityList.map((city) => city.code);\n  const cities = MdmsRes.tenant.tenants\n    .filter((city) => citiesMap.includes(city.code))\n    .map(({ code, name, logoId, emailId, address, contactNumber }) => ({\n      code,\n      name,\n      logoId,\n      emailId,\n      address,\n      contactNumber,\n      i18nKey: \"TENANT_TENANTS_\" + code.replace(\".\", \"_\").toUpperCase(),\n    }))\n    .sort((cityA, cityB) => {\n      const na = cityA.name.toLowerCase(),\n        nb = cityB.name.toLowerCase();\n      return SortByName(na, nb);\n    });\n  return cities;\n};\n\nconst initRequestBody = (tenantId) => ({\n  MdmsCriteria: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: \"common-masters\",\n        masterDetails: [{ name: \"Department\" }, { name: \"Designation\" }, { name: \"StateInfo\" }, { name: \"wfSlaConfig\" }, { name: \"uiHomePage\" }],\n      },\n      {\n        moduleName: \"tenant\",\n        masterDetails: [{ name: \"tenants\" }, { name: \"citymodule\" }],\n      },\n      {\n        moduleName: \"DIGIT-UI\",\n        masterDetails: [{ name: \"ApiCachingSettings\" }],\n      },\n    ],\n  },\n});\n\nconst getCriteria = (tenantId, moduleDetails) => {\n  return {\n    MdmsCriteria: {\n      tenantId,\n      ...moduleDetails,\n    },\n  };\n};\n\nexport const getGeneralCriteria = (tenantId, moduleCode, type) => ({\n  details: {\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: type,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nexport const getMultipleTypes = (tenantId, moduleCode, types) => ({\n  details: {\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: types.map((type) => ({ name: type })),\n      },\n    ],\n  },\n});\nexport const getMultipleTypesWithFilter = (moduleCode, masterDetails) => ({\n  details: {\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: masterDetails,\n      },\n    ],\n  },\n});\n\nconst getReceiptKey = (tenantId, moduleCode) => ({\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"uiCommonPay\",\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getBillsGenieKey = (tenantId, moduleCode) => ({\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"BusinessService\",\n          },\n        ],\n      },\n      {\n        moduleName: \"tenant\",\n        masterDetails: [{ name: \"tenants\" }, { name: \"citymodule\" }],\n      },\n      {\n      moduleName: \"common-masters\",\n      masterDetails: [{name: \"uiCommonPay\"}]\n      }\n    ],\n  },\n});\n\nconst getModuleServiceDefsCriteria = (tenantId, moduleCode) => ({\n  type: \"serviceDefs\",\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: `RAINMAKER-${moduleCode}`,\n        masterDetails: [\n          {\n            name: \"ServiceDefs\",\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getSanitationTypeCriteria = (tenantId, moduleCode) => ({\n  type: \"SanitationType\",\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"SanitationType\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getPitTypeCriteria = (tenantId, moduleCode) => ({\n  type: \"PitType\",\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"PitType\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getApplicationChannelCriteria = (tenantId, moduleCode) => ({\n  type: \"ApplicationChannel\",\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"ApplicationChannel\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getPropertyTypeCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"PropertyType\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getPropertyUsageCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"PropertyType\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getCommonFieldsCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"CommonFieldsConfig\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getPreFieldsCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"PreFieldsConfig\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getPostFieldsCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"PostFieldsConfig\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getConfig = (tenantId, moduleCode) => ({\n  type: \"Config\",\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"Config\",\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getVehicleTypeCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"VehicleMakeModel\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getChecklistCriteria = (tenantId, moduleCode) => ({\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"CheckList\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getSlumLocalityCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"Slum\",\n          },\n        ],\n      },\n    ],\n  },\n});\nconst getPropertyOwnerTypeCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"OwnerType\" }],\n      },\n    ],\n  },\n});\n\nconst getSubPropertyOwnerShipCategoryCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"SubOwnerShipCategory\" }],\n      },\n    ],\n  },\n});\nconst getPropertyOwnerShipCategoryCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"OwnerShipCategory\" }],\n      },\n    ],\n  },\n});\n\nconst getTradeOwnerShipCategoryCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"OwnerShipCategory\" }],\n      },\n    ],\n  },\n});\n\nconst getDocumentRequiredScreenCategory = (tenantId, moduleCode) => ({\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"Documents\",\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getDefaultMapConfig = (tenantId, moduleCode) => ({\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"MapConfig\",\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getUsageCategoryList = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"UsageCategory\" }],\n      },\n    ],\n  },\n});\n\nconst getPTPropertyTypeList = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"PropertyType\" }],\n      },\n    ],\n  },\n});\n\nconst getTLStructureTypeList = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"StructureType\" }],\n      },\n    ],\n  },\n});\n\nconst getTLAccessoriesTypeList = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"AccessoriesCategory\" }],\n      },\n    ],\n  },\n});\n\nconst getTLFinancialYearList = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"FinancialYear\", filter: `[?(@.module == \"TL\")]` }],\n      },\n    ],\n  },\n});\n\nconst getPTFloorList = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"Floor\" }],\n      },\n    ],\n  },\n});\n\nconst getReasonCriteria = (tenantId, moduleCode, type, payload) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: payload.map((mdmsLoad) => ({\n          name: mdmsLoad,\n        })),\n      },\n    ],\n  },\n});\n\nconst getBillingServiceForBusinessServiceCriteria = (filter) => ({\n  moduleDetails: [\n    {\n      moduleName: \"BillingService\",\n      masterDetails: [\n        { name: \"BusinessService\", filter },\n        {\n          name: \"TaxHeadMaster\",\n        },\n        {\n          name: \"TaxPeriod\",\n        },\n      ],\n    },\n  ],\n});\n\nconst getRoleStatusCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"RoleStatusMapping\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\nconst getRentalDetailsCategoryCriteria = (tenantId, moduleCode) => ({\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"RentalDetails\",\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getChargeSlabsCategoryCriteria = (tenantId, moduleCode) => ({\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"ChargeSlabs\",\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getGenderTypeList = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"GenderType\",\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getMeterStatusTypeList = (tenantId) => ({\n    moduleDetails: [\n      {\n        moduleName: \"ws-services-calculation\",\n        masterDetails: [\n          {\n            name: \"MeterStatus\",\n            filter: `$.*.name`\n          },\n        ],\n      },\n    ],\n\n});\n\nconst getBillingPeriodValidation = (tenantId) => ({\n    moduleDetails: [\n      {\n        moduleName: \"ws-services-masters\",\n        masterDetails: [\n          {\n            name: \"billingPeriod\",\n            filter: \"*\"\n          },\n        ],\n      },\n    ],\n});\n\nconst getDssDashboardCriteria = (tenantId, moduleCode) => ({\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"dashboard-config\",\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getMCollectBillingServiceCriteria = (tenantId, moduleCode, type, filter) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"BusinessService\", filter: filter }],\n      },\n    ],\n  },\n});\n\nconst getTradeUnitsDataList = (tenantId, moduleCode, type, filter) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"TradeType\", filter: filter }],\n      },\n    ],\n  },\n});\n\nconst getMCollectApplicationStatusCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"applicationStatus\" }],\n      },\n    ],\n  },\n});\n\nconst getHrmsEmployeeRolesandDesignations = () => ({\n  moduleDetails: [\n    {\n      moduleName: \"common-masters\",\n      masterDetails: [\n        { name: \"Department\", filter: \"[?(@.active == true)]\" },\n        { name: \"Designation\", filter: \"[?(@.active == true)]\" },\n      ],\n    },\n    {\n      moduleName: \"tenant\",\n      masterDetails: [{ name: \"tenants\" }],\n    },\n    {\n      moduleName: \"ACCESSCONTROL-ROLES\",\n      masterDetails: [{ name: \"roles\", filter: \"$.[?(@.code!='CITIZEN')]\" }],\n    },\n    { moduleName: \"egov-location\", masterDetails: [{ name: \"TenantBoundary\" }] },\n  ],\n});\nconst getFSTPPlantCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"FSTPPlantInfo\" }],\n      },\n    ],\n  },\n});\nconst getCancelReceiptReason = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"CancelReceiptReason\" }],\n      },\n    ],\n  },\n});\nconst getReceiptStatus = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"ReceiptStatus\" }],\n      },\n    ],\n  },\n});\nconst getCancelReceiptReasonAndStatus = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [{ name: \"ReceiptStatus\" }, { name: \"uiCommonPay\" }],\n      },\n    ],\n  },\n});\n\nconst getDocumentTypesCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"DocTypeMapping\",\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getTradeTypeRoleCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"TradeTypetoRoleMapping\",\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getFSTPORejectionReasonCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"FSTPORejectionReason\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getFSMPaymentTypeCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"PaymentType\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getFSMTripNumberCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"TripNumber\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getFSMReceivedPaymentTypeCriteria = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: moduleCode,\n        masterDetails: [\n          {\n            name: \"ReceivedPaymentType\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getWSTaxHeadMasterCritera = (tenantId, moduleCode, type) => ({\n  type,\n  details: {\n    tenantId: tenantId,\n    moduleDetails: [\n      {\n        moduleName: \"BillingService\",\n        masterDetails: [\n          {\n            name: \"TaxHeadMaster\",\n            filter: null,\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst getHowItWorksJSON = (tenantId) => ({\n      moduleDetails: [\n      {\n        moduleName: \"common-masters\",\n        masterDetails: [\n          {\n            name: \"howItWorks\",\n          },\n        ],\n      },\n    ],\n});\n\nconst getFAQsJSON = (tenantId) => ({\n  moduleDetails: [\n  {\n    moduleName: \"common-masters\",\n    masterDetails: [\n      {\n        name: \"faqs\",\n      },\n    ],\n  },\n],\n});\nconst getDSSFAQsJSON = (tenantId) => ({\n  moduleDetails: [\n  {\n    moduleName: \"dss-dashboard\",\n    masterDetails: [\n      {\n        name: \"FAQs\",\n      },\n    ],\n  },\n],\n});\nconst getDSSAboutJSON = (tenantId) => ({\n  moduleDetails: [\n  {\n    moduleName: \"dss-dashboard\",\n    masterDetails: [\n      {\n        name: \"About\",\n      },\n    ],\n  },\n],\n});\n\nconst getStaticData = () => ({\n  moduleDetails: [\n    {\n      moduleName: \"common-masters\",\n      masterDetails: [\n        {\n          name: \"StaticData\",\n        },\n      ],\n    },\n  ],\n});\n\nconst GetEgovLocations = (MdmsRes) => {\n  return MdmsRes[\"egov-location\"].TenantBoundary[0].boundary.children.map((obj) => ({\n    name: obj.localname,\n    i18nKey: obj.localname,\n  }));\n};\n\nconst GetServiceDefs = (MdmsRes, moduleCode) => MdmsRes[`RAINMAKER-${moduleCode}`].ServiceDefs.filter((def) => def.active);\n\nconst GetSanitationType = (MdmsRes) => MdmsRes[\"FSM\"].SanitationType.filter((type) => type.active);\n\nconst GetPitType = (MdmsRes) =>\n  MdmsRes[\"FSM\"].PitType.filter((item) => item.active).map((type) => ({ ...type, i18nKey: `PITTYPE_MASTERS_${type.code}` }));\n\nconst GetApplicationChannel = (MdmsRes) =>\n  MdmsRes[\"FSM\"].ApplicationChannel.filter((type) => type.active).map((channel) => ({\n    ...channel,\n    i18nKey: `ES_APPLICATION_DETAILS_APPLICATION_CHANNEL_${channel.code}`,\n  }));\n\nconst GetPropertyType = (MdmsRes) =>\n  MdmsRes[\"FSM\"].PropertyType.filter((property) => property.active && !property.propertyType).map((item) => ({\n    ...item,\n    i18nKey: `PROPERTYTYPE_MASTERS_${item.code}`,\n    code: item.code,\n  }));\n\nconst GetPropertySubtype = (MdmsRes) =>\n  MdmsRes[\"FSM\"].PropertyType.filter((property) => property.active && property.propertyType).map((item) => ({\n    ...item,\n    i18nKey: `PROPERTYTYPE_MASTERS_${item.code}`,\n    code: item.code,\n  }));\n\nconst GetVehicleType = (MdmsRes) =>\n  MdmsRes[\"Vehicle\"].VehicleMakeModel.filter((vehicle) => vehicle.active)\n    .filter((vehicle) => vehicle.make)\n    .map((vehicleDetails) => {\n      return {\n        ...vehicleDetails,\n        i18nKey: `COMMON_MASTER_VEHICLE_${vehicleDetails.code}`,\n      };\n    });\n\nconst GetVehicleMakeModel = (MdmsRes) =>\n  MdmsRes[\"Vehicle\"].VehicleMakeModel.filter((vehicle) => vehicle.active)\n    .map((vehicleDetails) => {\n      return {\n        ...vehicleDetails,\n        i18nKey: `COMMON_MASTER_VEHICLE_${vehicleDetails.code}`,\n      };\n  });\n\nconst GetSlumLocalityMapping = (MdmsRes, tenantId) =>\n  MdmsRes[\"FSM\"].Slum.filter((type) => type.active).reduce((prev, curr) => {\n    return prev[curr.locality]\n      ? {\n          ...prev,\n          [curr.locality]: [\n            ...prev[curr.locality],\n            {\n              ...curr,\n              i18nKey: `${tenantId.toUpperCase().replace(\".\", \"_\")}_${curr.locality}_${curr.code}`,\n            },\n          ],\n        }\n      : {\n          ...prev,\n          [curr.locality]: [\n            {\n              ...curr,\n              i18nKey: `${tenantId.toUpperCase().replace(\".\", \"_\")}_${curr.locality}_${curr.code}`,\n            },\n          ],\n        };\n  }, {});\n\nconst GetPropertyOwnerShipCategory = (MdmsRes) =>\n  MdmsRes[\"PropertyTax\"].OwnerShipCategory.filter((ownerShip) => ownerShip.active).map((ownerShipDetails) => {\n    return {\n      ...ownerShipDetails,\n      i18nKey: `COMMON_MASTER_OWNER_TYPE_${ownerShipDetails.code}`,\n    };\n  });\n\nconst GetTradeOwnerShipCategory = (MdmsRes) =>\n  MdmsRes[\"common-masters\"].OwnerShipCategory.filter((ownerShip) => ownerShip.active).map((ownerShipDetails) => {\n    return {\n      ...ownerShipDetails,\n      i18nKey: `COMMON_MASTER_OWNER_TYPE_${ownerShipDetails.code}`,\n    };\n  });\n\nconst GetPropertyOwnerType = (MdmsRes) =>\n  MdmsRes[\"PropertyTax\"].OwnerType.filter((owner) => owner.active).map((ownerDetails) => {\n    return {\n      ...ownerDetails,\n      i18nKey: `PROPERTYTAX_OWNERTYPE_${ownerDetails.code}`,\n    };\n  });\n\nconst getSubPropertyOwnerShipCategory = (MdmsRes) => {\n  MdmsRes[\"PropertyTax\"].SubOwnerShipCategory.filter((category) => category.active).map((subOwnerShipDetails) => {\n    return {\n      ...subOwnerShipDetails,\n      i18nKey: `PROPERTYTAX_BILLING_SLAB_${subOwnerShipDetails.code}`,\n    };\n  });\n  sessionStorage.setItem(\"getSubPropertyOwnerShipCategory\", JSON.stringify(MdmsRes));\n};\n\nconst getDocumentRequiredScreen = (MdmsRes) => {\n  MdmsRes[\"PropertyTax\"].Documents.filter((Documents) => Documents.active).map((dropdownData) => {\n    return {\n      ...Documents,\n      i18nKey: `${dropdownData.code}`,\n    };\n  });\n};\n\nconst getTLDocumentRequiredScreen = (MdmsRes) => {\n  MdmsRes[\"TradeLicense\"].Documents.filter((Documents) => Documents.active).map((dropdownData) => {\n    return {\n      ...Documents,\n      i18nKey: `${dropdownData.code}`,\n    };\n  });\n};\n\nconst getMapConfig = (MdmsRes) => {\n  MdmsRes[\"PropertyTax\"].MapConfig.filter((MapConfig) => MapConfig).map((MapData) => {\n    return {\n      ...MapConfig,\n      defaultconfig: MapData.defaultConfig,\n    };\n  });\n};\n\nconst getUsageCategory = (MdmsRes) =>\n  MdmsRes[\"PropertyTax\"].UsageCategory.filter((UsageCategory) => UsageCategory.active).map((UsageCategorylist) => {\n    return {\n      ...UsageCategorylist,\n      i18nKey: `PROPERTYTAX_BILLING_SLAB_${UsageCategorylist.code}`,\n    };\n  });\n\nconst getPTPropertyType = (MdmsRes) =>\n  MdmsRes[\"PropertyTax\"].UsageCategory.filter((PropertyType) => PropertyType.active).map((PTPropertyTypelist) => {\n    return {\n      ...UsageCategorylist,\n      i18nKey: `COMMON_PROPTYPE_${Digit.Utils.locale.stringReplaceAll(PTPropertyTypelist.code, \".\", \"_\")}`,\n    };\n  });\n\nconst getTLStructureType = (MdmsRes) =>\n  MdmsRes[\"common-masters\"].StructureType.filter((StructureType) => StructureType.active).map((TLStructureTypeList) => {\n    return {\n      ...TLStructureTypeList,\n      i18nKey: `COMMON_MASTERS_STRUCTURETYPE_${Digit.Utils.locale.stringReplaceAll(TLStructureTypeList.code, \".\", \"_\")}`,\n    };\n  });\n\nconst getTLAccessoriesType = (MdmsRes) =>\n  MdmsRes[\"TradeLicense\"].AccessoriesCategory.filter((AccessoriesCategory) => AccessoriesCategory.active).map((TLAccessoryTypeList) => {\n    return {\n      ...TLAccessoryTypeList,\n      i18nKey: `TRADELICENSE_ACCESSORIESCATEGORY_${Digit.Utils.locale.stringReplaceAll(TLAccessoryTypeList.code, \".\", \"_\")}`,\n    };\n  });\n\nconst getTLFinancialYear = (MdmsRes) =>\n  MdmsRes[\"egf-master\"].FinancialYear.filter((FinancialYear) => FinancialYear.active && FinancialYear.module === \"TL\").map((FinancialYearList) => {\n    return {\n      ...FinancialYearList,\n      //i18nKey: `TRADELICENSE_ACCESSORIESCATEGORY_${stringReplaceAll(TLAccessoryTypeList.code, \".\", \"_\")}`,\n    };\n  });\nconst getFloorList = (MdmsRes) =>\n  MdmsRes[\"PropertyTax\"].Floor.filter((PTFloor) => PTFloor.active).map((PTFloorlist) => {\n    return {\n      ...PTFloorlist,\n      i18nKey: `PROPERTYTAX_FLOOR_${PTFloorlist.code}`,\n    };\n  });\n\nconst GetReasonType = (MdmsRes, type, moduleCode) =>\n  Object.assign(\n    {},\n    ...Object.keys(MdmsRes[moduleCode]).map((collection) => ({\n      [collection]: MdmsRes[moduleCode][collection]\n        .filter((reason) => reason.active)\n        .map((reason) => ({\n          ...reason,\n          i18nKey: `ES_ACTION_REASON_${reason.code}`,\n        })),\n    }))\n  );\n\nconst getRentalDetailsCategory = (MdmsRes) => {\n  MdmsRes[\"PropertyTax\"].RentalDetails.filter((category) => category.active).map((RentalDetailsInfo) => {\n    return {\n      ...RentalDetailsInfo,\n      i18nKey: `PROPERTYTAX_BILLING_SLAB_${RentalDetailsInfo.code}`,\n    };\n  });\n};\n\nconst getChargeSlabsCategory = (MdmsRes) => {\n  MdmsRes[\"PropertyTax\"].ChargeSlabs.filter((category) => category.active).map((ChargeSlabsInfo) => {\n    return {\n      ...ChargeSlabsInfo,\n    };\n  });\n};\n\nconst getGenderType = (MdmsRes) => {\n  return MdmsRes[\"common-masters\"].GenderType.filter((GenderType) => GenderType.active).map((genderDetails) => {\n    return {\n      ...genderDetails,\n      i18nKey: `PT_COMMON_GENDER_${genderDetails.code}`,\n    };\n  });\n  //return MdmsRes;\n};\n\nconst TLGenderType = (MdmsRes) => {\n  MdmsRes[\"common-masters\"].GenderType.filter((GenderType) => GenderType.active).map((genders) => {\n    return {\n      ...genders,\n      i18nKey: `TL_GENDER_${genders.code}`,\n    };\n  });\n};\n\nconst PTGenderType = (MdmsRes) => {\n  MdmsRes[\"common-masters\"].GenderType.filter((GenderType) => GenderType.active).map((formGender) => {\n    return {\n      ...formGender,\n      i18nKey: `PT_FORM3_${formGender.code}`,\n    };\n  });\n};\n\nconst HRGenderType = (MdmsRes) => {\n  MdmsRes[\"common-masters\"].GenderType.filter((GenderType) => GenderType.active).map((comGender) => {\n    return {\n      ...comGender,\n      i18nKey: `COMMON_GENDER_${comGender.code}`,\n    };\n  });\n};\n\nconst GetMCollectBusinessService = (MdmsRes) =>\n  MdmsRes[\"BillingService\"].BusinessService.map((businesServiceDetails) => {\n    return {\n      ...businesServiceDetails,\n      i18nKey: `BILLINGSERVICE_BUSINESSSERVICE_${businesServiceDetails.code}`,\n    };\n  });\n\nconst GetMCollectApplicationStatus = (MdmsRes) =>\n  MdmsRes[\"mCollect\"].applcationStatus.map((appStatusDetails) => {\n    return {\n      ...appStatusDetails,\n      i18nKey: `BILLINGSERVICE_BUSINESSSERVICE_${appStatusDetails.code}`,\n    };\n  });\n\nconst getFSMGenderType = (MdmsRes) => {\n  return MdmsRes[\"common-masters\"].GenderType.map((genderDetails) => {\n    return {\n      ...genderDetails,\n      i18nKey: `COMMON_GENDER_${genderDetails.code}`,\n    };\n  });\n};\n\nconst GetFSTPORejectionReason = (MdmsRes) => {\n  return MdmsRes[\"Vehicle\"].FSTPORejectionReason.filter((reason) => reason.active).map((reasonDetails) => {\n    return {\n      ...reasonDetails,\n      i18nKey: `ES_ACTION_REASON_${reasonDetails.code}`,\n    };\n  });\n};\n\nconst GetPaymentType = (MdmsRes) => {\n  return MdmsRes[\"FSM\"].PaymentType.filter((option) => option.active).map((reasonDetails) => {\n    return {\n      ...reasonDetails,\n      i18nKey: `ES_ACTION_${reasonDetails.code}`,\n    };\n  });\n};\n\nconst GetTripNumber = (MdmsRes) => {\n  return MdmsRes[\"FSM\"].TripNumber.filter((option) => option.active).map((reasonDetails) => {\n    return {\n      ...reasonDetails,\n      i18nKey: `ES_ACTION_TRIP_${reasonDetails.code}`,\n    };\n  });\n};\n\nconst GetReceivedPaymentType = (MdmsRes) => {\n  return MdmsRes[\"FSM\"].ReceivedPaymentType.filter((option) => option.active).map((reasonDetails) => {\n    return {\n      ...reasonDetails,\n      i18nKey: `ES_ACTION_${reasonDetails.code}`,\n    };\n  });\n};\n\nconst getDssDashboard = (MdmsRes) => MdmsRes[\"dss-dashboard\"][\"dashboard-config\"];\n\nconst GetRoleStatusMapping = (MdmsRes) => MdmsRes[\"DIGIT-UI\"].RoleStatusMapping;\nconst GetCommonFields = (MdmsRes, moduleCode) =>\n  moduleCode.toUpperCase() === \"PROPERTYTAX\" ? MdmsRes[\"PropertyTax\"].CommonFieldsConfig : MdmsRes[\"FSM\"].CommonFieldsConfig;\n\nconst GetPreFields = (MdmsRes) => MdmsRes[\"FSM\"].PreFieldsConfig;\n\nconst GetPostFields = (MdmsRes) => MdmsRes[\"FSM\"].PostFieldsConfig;\n\nconst GetFSTPPlantInfo = (MdmsRes) => MdmsRes[\"FSM\"]?.FSTPPlantInfo;\n\nconst GetDocumentsTypes = (MdmsRes) => MdmsRes[\"BPA\"].DocTypeMapping;\n\nconst GetChecklist = (MdmsRes) => MdmsRes[\"BPA\"].CheckList;\n\nconst transformResponse = (type, MdmsRes, moduleCode, tenantId) => {\n  switch (type) {\n    case \"citymodule\":\n      return GetCitiesWithi18nKeys(MdmsRes, moduleCode);\n    case \"egovLocation\":\n      return GetEgovLocations(MdmsRes);\n    case \"serviceDefs\":\n      return GetServiceDefs(MdmsRes, moduleCode);\n    case \"ApplicationChannel\":\n      return GetApplicationChannel(MdmsRes);\n    case \"SanitationType\":\n      return GetSanitationType(MdmsRes);\n    case \"PropertyType\":\n      return GetPropertyType(MdmsRes);\n    case \"PropertySubtype\":\n      return GetPropertySubtype(MdmsRes);\n    case \"PitType\":\n      return GetPitType(MdmsRes);\n    case \"VehicleType\":\n      return GetVehicleType(MdmsRes);\n    case \"VehicleMakeModel\":\n      return GetVehicleMakeModel(MdmsRes);\n    case \"Slum\":\n      return GetSlumLocalityMapping(MdmsRes, tenantId);\n    case \"OwnerShipCategory\":\n      return GetPropertyOwnerShipCategory(MdmsRes);\n    case \"TLOwnerShipCategory\":\n      return GetTradeOwnerShipCategory(MdmsRes);\n    case \"OwnerType\":\n      return GetPropertyOwnerType(MdmsRes);\n    case \"SubOwnerShipCategory\":\n      return getSubPropertyOwnerShipCategory(MdmsRes);\n    case \"Documents\":\n      return getDocumentRequiredScreen(MdmsRes);\n    case \"TLDocuments\":\n      return getTLDocumentRequiredScreen(MdmsRes);\n    case \"MapConfig\":\n      return getMapConfig(MdmsRes);\n    case \"UsageCategory\":\n      return getUsageCategory(MdmsRes);\n    case \"PTPropertyType\":\n      return getPTPropertyType(MdmsRes);\n    case \"StructureType\":\n      return getTLStructureType(MdmsRes);\n    case \"AccessoryCategory\":\n      return getTLAccessoriesType(MdmsRes);\n    case \"FinancialYear\":\n      return getTLFinancialYear(MdmsRes);\n    case \"Floor\":\n      return getFloorList(MdmsRes);\n    case \"Reason\":\n      return GetReasonType(MdmsRes, type, moduleCode);\n    case \"RoleStatusMapping\":\n      return GetRoleStatusMapping(MdmsRes);\n    case \"CommonFieldsConfig\":\n      return GetCommonFields(MdmsRes, moduleCode);\n    case \"PreFieldsConfig\":\n      return GetPreFields(MdmsRes);\n    case \"PostFieldsConfig\":\n      return GetPostFields(MdmsRes);\n    case \"RentalDeatils\":\n      return getRentalDetailsCategory(MdmsRes);\n    case \"ChargeSlabs\":\n      return getChargeSlabsCategory(MdmsRes);\n    case \"DssDashboard\":\n      return getDssDashboard(MdmsRes);\n    case \"BusinessService\":\n      return GetMCollectBusinessService(MdmsRes);\n    case \"applcatonStatus\":\n      return GetMCollectApplicationStatus(MdmsRes);\n    case \"FSTPPlantInfo\":\n      return GetFSTPPlantInfo(MdmsRes);\n    case \"GenderType\":\n      return getGenderType(MdmsRes);\n    case \"TLGendertype\":\n      return TLGenderType(MdmsRes);\n    case \"PTGenderType\":\n      return PTGenderType(MdmsRes);\n    case \"HRGenderType\":\n      return HRGenderType(MdmsRes);\n    case \"DocumentTypes\":\n      return GetDocumentsTypes(MdmsRes);\n    case \"CheckList\":\n      return GetChecklist(MdmsRes);\n    case \"FSMGenderType\":\n      return getFSMGenderType(MdmsRes);\n    case \"FSTPORejectionReason\":\n      return GetFSTPORejectionReason(MdmsRes);\n    case \"PaymentType\":\n      return GetPaymentType(MdmsRes);\n    case \"TripNumber\":\n      return GetTripNumber(MdmsRes);\n    case \"ReceivedPaymentType\":\n      return GetReceivedPaymentType(MdmsRes);\n    default:\n      return MdmsRes;\n  }\n};\n\nconst getCacheSetting = (moduleName) => {\n  return ApiCacheService.getSettingByServiceUrl(Urls.MDMS, moduleName);\n};\n\nconst mergedData = {};\nconst mergedPromises = {};\nconst callAllPromises = (success, promises = [], resData) => {\n  promises.forEach((promise) => {\n    if (success) {\n      promise.resolve(resData);\n    } else {\n      promise.reject(resData);\n    }\n  });\n};\nconst mergeMDMSData = (data, tenantId) => {\n  if (!mergedData[tenantId] || Object.keys(mergedData[tenantId]).length === 0) {\n    mergedData[tenantId] = data;\n  } else {\n    data.MdmsCriteria.moduleDetails.forEach((dataModuleDetails) => {\n      const moduleName = dataModuleDetails.moduleName;\n      const masterDetails = dataModuleDetails.masterDetails;\n      let found = false;\n      mergedData[tenantId].MdmsCriteria.moduleDetails.forEach((moduleDetail) => {\n        if (moduleDetail.moduleName === moduleName) {\n          found = true;\n          moduleDetail.masterDetails = [...moduleDetail.masterDetails, ...masterDetails];\n        }\n      });\n      if (!found) {\n        mergedData[tenantId].MdmsCriteria.moduleDetails.push(dataModuleDetails);\n      }\n    });\n  }\n};\nconst debouncedCall = ({ serviceName, url, data, useCache, params }, resolve, reject) => {\n  if (!mergedPromises[params.tenantId] || mergedPromises[params.tenantId].length === 0) {\n    const cacheSetting = getCacheSetting();\n    setTimeout(() => {\n      let callData = JSON.parse(JSON.stringify(mergedData[params.tenantId]));\n      mergedData[params.tenantId] = {};\n      let callPromises = [...mergedPromises[params.tenantId]];\n      mergedPromises[params.tenantId] = [];\n      ServiceRequest({\n        serviceName,\n        url,\n        data: callData,\n        useCache,\n        params,\n      })\n        .then((data) => {\n          callAllPromises(true, callPromises, data);\n        })\n        .catch((err) => {\n          callAllPromises(false, callPromises, err);\n        });\n    }, cacheSetting.debounceTimeInMS || 500);\n  }\n  mergeMDMSData(data, params.tenantId);\n  if (!mergedPromises[params.tenantId]) {\n    mergedPromises[params.tenantId] = [];\n  }\n  mergedPromises[params.tenantId].push({ resolve, reject });\n};\n\nexport const MdmsService = {\n  init: (stateCode) =>\n    ServiceRequest({\n      serviceName: \"mdmsInit\",\n      url: Urls.MDMS,\n      data: initRequestBody(stateCode),\n      useCache: true,\n      params: { tenantId: stateCode },\n    }),\n  call: (tenantId, details) => {\n    return new Promise((resolve, reject) =>\n      debouncedCall(\n        {\n          serviceName: \"mdmsCall\",\n          url: Urls.MDMS,\n          data: getCriteria(tenantId, details),\n          useCache: true,\n          params: { tenantId },\n        },\n        resolve,\n        reject\n      )\n    );\n  },\n  getDataByCriteria: async (tenantId, mdmsDetails, moduleCode) => {\n    const key = `MDMS.${tenantId}.${moduleCode}.${mdmsDetails.type}.${JSON.stringify(mdmsDetails.details)}`;\n    const inStoreValue = PersistantStorage.get(key);\n    if (inStoreValue) {\n      return inStoreValue;\n    }\n    const { MdmsRes } = await MdmsService.call(tenantId, mdmsDetails.details);\n    const responseValue = transformResponse(mdmsDetails.type, MdmsRes, moduleCode.toUpperCase(), tenantId);\n    const cacheSetting = getCacheSetting(mdmsDetails.details.moduleDetails[0].moduleName);\n    PersistantStorage.set(key, responseValue, cacheSetting.cacheTimeInSecs);\n    return responseValue;\n  },\n  getServiceDefs: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getModuleServiceDefsCriteria(tenantId, moduleCode), moduleCode);\n  },\n  getSanitationType: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getSanitationTypeCriteria(tenantId, moduleCode), moduleCode);\n  },\n  getApplicationChannel: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getApplicationChannelCriteria(tenantId, moduleCode), moduleCode);\n  },\n  getPropertyType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getPropertyTypeCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n  getPropertyUsage: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getPropertyUsageCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n  getPropertySubtype: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getPropertyTypeCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n  getPitType: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getPitTypeCriteria(tenantId, moduleCode), moduleCode);\n  },\n  getVehicleType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getVehicleTypeCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n  getChecklist: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getChecklistCriteria(tenantId, moduleCode), moduleCode);\n  },\n  getPaymentRules: (tenantId, filter) => {\n    return MdmsService.call(tenantId, getBillingServiceForBusinessServiceCriteria(filter));\n  },\n\n  getCustomizationConfig: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getConfig(tenantId, moduleCode), moduleCode);\n  },\n  getSlumLocalityMapping: (tenantId, moduleCode, type) =>\n    MdmsService.getDataByCriteria(tenantId, getSlumLocalityCriteria(tenantId, moduleCode, type), moduleCode),\n\n  getReason: (tenantId, moduleCode, type, payload) =>\n    MdmsService.getDataByCriteria(tenantId, getReasonCriteria(tenantId, moduleCode, type, payload), moduleCode),\n\n  getRoleStatus: (tenantId, moduleCode, type) =>\n    MdmsService.getDataByCriteria(tenantId, getRoleStatusCriteria(tenantId, moduleCode, type), moduleCode),\n\n  getCommonFieldsConfig: (tenantId, moduleCode, type, payload) =>\n    MdmsService.getDataByCriteria(tenantId, getCommonFieldsCriteria(tenantId, moduleCode, type, payload), moduleCode),\n\n  getPreFieldsConfig: (tenantId, moduleCode, type, payload) =>\n    MdmsService.getDataByCriteria(tenantId, getPreFieldsCriteria(tenantId, moduleCode, type, payload), moduleCode),\n\n  getPostFieldsConfig: (tenantId, moduleCode, type, payload) =>\n    MdmsService.getDataByCriteria(tenantId, getPostFieldsCriteria(tenantId, moduleCode, type, payload), moduleCode),\n\n  getPropertyOwnerShipCategory: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getPropertyOwnerShipCategoryCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n\n  GetTradeOwnerShipCategory: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getTradeOwnerShipCategoryCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n\n  getPropertyOwnerType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getPropertyOwnerTypeCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n  getPropertySubOwnerShipCategory: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getSubPropertyOwnerShipCategoryCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n  getDocumentRequiredScreen: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getDocumentRequiredScreenCategory(tenantId, moduleCode), moduleCode);\n  },\n  getTLDocumentRequiredScreen: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getDocumentRequiredScreenCategory(tenantId, moduleCode), moduleCode);\n  },\n  getTradeUnitsData: (tenantId, moduleCode, type, filter) => {\n    return MdmsService.getDataByCriteria(tenantId, getTradeUnitsDataList(tenantId, moduleCode, type, filter), moduleCode);\n  },\n  getMapConfig: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getDefaultMapConfig(tenantId, moduleCode), moduleCode);\n  },\n  getUsageCategory: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getUsageCategoryList(tenantId, moduleCode), moduleCode);\n  },\n  getPTPropertyType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getPTPropertyTypeList(tenantId, moduleCode), moduleCode);\n  },\n  getTLStructureType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getTLStructureTypeList(tenantId, moduleCode), moduleCode);\n  },\n  getTLAccessoriesType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getTLAccessoriesTypeList(tenantId, moduleCode), moduleCode);\n  },\n  getTLFinancialYear: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getTLFinancialYearList(tenantId, moduleCode), moduleCode);\n  },\n  getFloorList: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getPTFloorList(tenantId, moduleCode, type), moduleCode);\n  },\n  getRentalDetails: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getRentalDetailsCategoryCriteria(tenantId, moduleCode), moduleCode);\n  },\n  getChargeSlabs: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getChargeSlabsCategoryCriteria(tenantId, moduleCode), moduleCode);\n  },\n  getDssDashboard: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getDssDashboardCriteria(tenantId, moduleCode), moduleCode);\n  },\n  getPaymentGateway: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getGeneralCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n  getReceiptKey: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getReceiptKey(tenantId, moduleCode), moduleCode);\n  },\n  getHelpText: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getGeneralCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n  getMCollectBillingService: (tenantId, moduleCode, type, filter) => {\n    return MdmsService.getDataByCriteria(tenantId, getMCollectBillingServiceCriteria(tenantId, moduleCode, type, filter), moduleCode);\n  },\n  getMCollectApplcationStatus: (tenantId, moduleCode, type, filter) => {\n    return MdmsService.getDataByCriteria(tenantId, getMCollectApplicationStatusCriteria(tenantId, moduleCode, type, filter), moduleCode);\n  },\n  getHrmsEmployeeRolesandDesignation: (tenantId) => {\n    return MdmsService.call(tenantId, getHrmsEmployeeRolesandDesignations());\n  },\n  getHrmsEmployeeTypes: (tenantId, moduleCode, type, filter) => {\n    return MdmsService.getDataByCriteria(tenantId, getGeneralCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n  getHrmsEmployeeReason: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getGeneralCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n  getMultipleTypes: (tenantId, moduleCode, types) => {\n    return MdmsService.getDataByCriteria(tenantId, getMultipleTypes(tenantId, moduleCode, types), moduleCode);\n  },\n  getMultipleTypesWithFilter: (tenantId, moduleCode, types) => {\n    return MdmsService.getDataByCriteria(tenantId, getMultipleTypesWithFilter(moduleCode, types), moduleCode);\n  },\n  getFSTPPlantInfo: (tenantId, moduleCode, types) => {\n    return MdmsService.getDataByCriteria(tenantId, getFSTPPlantCriteria(tenantId, moduleCode, types), moduleCode);\n  },\n  getCancelReceiptReason: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getCancelReceiptReason(tenantId, moduleCode), moduleCode);\n  },\n  getReceiptStatus: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getReceiptStatus(tenantId, moduleCode), moduleCode);\n  },\n  getCancelReceiptReasonAndStatus: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getCancelReceiptReasonAndStatus(tenantId, moduleCode), moduleCode);\n  },\n\n  getGenderType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getGenderTypeList(tenantId, moduleCode, type), moduleCode);\n  },\n\n  TLGenderType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getGenderTypeList(tenantId, moduleCode, type), moduleCode);\n  },\n\n  PTGenderType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getGenderTypeList(tenantId, moduleCode, type), moduleCode);\n  },\n\n  HRGenderType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getGenderTypeList(tenantId, moduleCode, type), moduleCode);\n  },\n\n  getDocumentTypes: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getDocumentTypesCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n\n  getTradeTypeRoleTypes: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getTradeTypeRoleCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n\n  getFSMGenderType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getGenderTypeList(tenantId, moduleCode, type), moduleCode);\n  },\n\n  getFSTPORejectionReason: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getFSTPORejectionReasonCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n\n  getFSMPaymentType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getFSMPaymentTypeCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n  getBillsGenieKey: (tenantId, moduleCode) => {\n    return MdmsService.getDataByCriteria(tenantId, getBillsGenieKey(tenantId, moduleCode), moduleCode);\n  },\n\n  getFSMTripNumber: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getFSMTripNumberCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n\n  getFSMReceivedPaymentType: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getFSMReceivedPaymentTypeCriteria(tenantId, moduleCode, type), moduleCode);\n  },\n  getWSTaxHeadMaster: (tenantId, moduleCode, type) => {\n    return MdmsService.getDataByCriteria(tenantId, getWSTaxHeadMasterCritera(tenantId, moduleCode, type), moduleCode);\n  },\n\n  getMeterStatusType: (tenantId) => {\n    return MdmsService.call(tenantId, getMeterStatusTypeList(tenantId));\n  },\n\n  getBillingPeriod: (tenantId) => {\n    return MdmsService.call(tenantId, getBillingPeriodValidation(tenantId));\n  },\n  getHowItWorksJSONData: (tenantId) => {\n    return MdmsService.call(tenantId, getHowItWorksJSON(tenantId));\n  },\n  getFAQsJSONData: (tenantId) => {\n    return MdmsService.call(tenantId, getFAQsJSON(tenantId));\n  },\n  getDSSFAQsJSONData: (tenantId) => {\n    return MdmsService.call(tenantId, getDSSFAQsJSON(tenantId));\n  },\n  \n  getDSSAboutJSONData: (tenantId) => {\n    return MdmsService.call(tenantId, getDSSAboutJSON(tenantId));\n  },\n  getStaticDataJSON: (tenantId) => {\n    return MdmsService.call(tenantId, getStaticData());\n  }\n};\n","import { MdmsService } from \"@egovernments/digit-ui-libraries/src/services/elements/MDMS\";\nimport { useQuery } from \"react-query\";\n// import { MdmsService } from \"../services/elements/MDMS\";\n/**\n * Custom hook which can be used to\n * make a single hook a module to get multiple masterdetails with/without filter\n *\n * @author jagankumar-egov\n *\n * @example\n * // returns useQuery object\n * Digit.Hooks.useCustomMDMS(\n *          \"stateid\",\n *          \"modulename\",\n *          [\n *              { name:\"masterdetail1\",filter:\"[?(@.active == true)]\"},\n *              { name:\"masterdetail2\" }\n *          ],\n *          { // all configs supported by the usequery\n *              default:(data)=>{\n *                          format\n *                          return formattedData;\n *                          }\n *          })\n *\n * @returns {Object} Returns the object of the useQuery from react-query.\n */\nconst useCustomMDMS = (tenantId, moduleName, masterDetails = [], config = {}) => {\n  return useQuery([tenantId, moduleName, masterDetails], () => MdmsService.getMultipleTypesWithFilter(tenantId, moduleName, masterDetails), config);\n};\n\nexport default useCustomMDMS;\n"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAGA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAkBA;AAAA;AAjBA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAVA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClNA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;ACthjsDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;;;;A","sourceRoot":""}